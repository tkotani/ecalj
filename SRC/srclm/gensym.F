      subroutine gensym(slabl,gens,usegen,lcar,lfix,fptol,lsmall,nbas,
     .nspec,ngmx,plat,platcv,ldist,dist,bas,ips,nrspec,ng,g,
     .ag,ngen,gen,nwgens,nggen,isym,istab)
C- Generate the space group
C ----------------------------------------------------------------------
Ci Inputs:
Ci   slabl: name of the different species.
Ci   gens:  a list of generators, in symbolic representation
Ci          NB: this list is not required; see Remarks.
Ci   usegen:0 Find any additional group operations for this basis.
Ci          1 Also, extra basis atoms are added as needed to guarantee
Ci            the group operations created from gens are valid.
Ci          2 Do neither 0 nor 1.
Ci   lcar:  (not used)
Ci          T express ag,positions in cartesian coordinates
Ci          F express in units of conventional unit cell
Ci   lfix:  T: do not rotate or shift lattice
Ci   fptol: >0:Adjust positions slightly, rendering them as exactly
Ci          possible consistent with the symmetry group.  Any sites
Ci          within a lattice vector of tol are considered to be
Ci          at the same point.
Ci   nspec: number of classes, atoms in same class are symmetry-related
Ci   plat:  primitive lattice vectors (scaled by alat)
Ci   platcv:Used to scale translation part of generators,
Ci         :when translation part specified as a multiple of
Ci         :lattice vectors.  Can be same as plat but
Ci         :primitive lattice vectors of "conventional unit cell"
Ci         :are sometimes used to specify these translations, e.g.
Ci         :when generated from spacegroup data in some books.
Ci   ldist: lattice deformation matrix key; see lattdf
Ci   dist:  lattice deformation matrix; see lattdf
Cio Inputs/Outputs (altered only if usegen=F)
Cio  nbas:  On input, number of atoms in the basis
Cio         On output nbas may be enlarged, depending symops and usegen
Cio  bas:   basis vectors
Cio         On output bas may be enlarged, depending symops and usegen
Cio  ips:   the jth atom belongs to spec ips(j)
Cio         On output ips may be enlarged, depending symops and usegen
Co Outputs:
Co   istab: site ib is transformed into istab(ib,ig) by operation ig
Co   g:     symmetry operation matrix (assumed dimensioned >=ngmx)
Co   ag:    symmetry operation vector (assumed dimensioned >=ngmx)
Co   ... The following are generated if usegen=F
Co   isym:  numbers characterizing the symmetry of lattice and crystal
Co          isym(1) produces index for underlying lattice (see symlat)
Co   lsmall:if T: a smaller unit cell can be found
Co   nrspec:number of atoms in the ith class
Co   ng:    number of group operations
Co   ngen:  number of symmetry generators
Co   gen:   generators in matrix form
Co   nwgens:generators in ascii form
Co   nggen :number of group ops generated by generators.
Co         :Usually nggen=ng; however nggen can exceed ng if
Co         :supercell is artificial -> extra translations; see groupg
Cl Local variables
Cl   modes: 0 -> sgroup compares point and space groups
Cl          1 -> sgroup compares point groups only
Cl          (set with 'points' keyword in gens)
Cr Remarks:
Cr   gensym generates the space group, using the following prescription:
Cr     1.  Any generators supplied from input gens
Cr         are checked for consistency with the underlying lattice.
Cr     2.  The space group is made from these generators.
Cr     3.  if usegen<2, missing basis atoms are added to make
Cr         the basis consistent with the supplied symmetry.
Cr     4.  nrspec is created
Cr     ... Unless usegen is 0, nothing more is done
Cr     5.  The point group of the underlying lattice without the
Cr         basis is generated.
Cr     6.  The full space group is generated from the point group
Cr     7.  A set of generators for this group is created
Cr   This program was adapted from the Stuttgart ASA version lmto-46.
Cb Bugs:
Cb   auto symmetry finder can fail with supercells, where extra
Cb   group operations include the same point group but inequivalent
Cb   translations.  Solution: have symcry call sgroup to see
Cb   if the space group is enlarged.  If so, space group should be
Cb   enlarged.
Cu Updates
Cu   04 Jan 06 Enabled keyword 'point' in ssymgr, returns if ng>ngmx
Cu   13 Dec 03 Uses platcv when scaling translation part of symgrp
Cu   05 Apr 03 Call sgroup looking only for point group ops;see bugs
Cu   03 Nov 01 Shortened argument list, eliminating duplicate bas,ips
C ----------------------------------------------------------------------
C     implicit none
C Passed parameters:
      integer nbas,isym(*),istab(nbas,*),nspec,ngen,ngmx,
     .ng,nrspec(nspec),usegen,ldist,ips(nbas),nggen
C     integer istab2(nbas,*)
      double precision plat(9),platcv(9),g(9,*),ag(3,*),dist(3,3),
     .bas(3,nbas),fptol
      character*8  slabl(*), gens*(*), nwgens*(*)
      logical lcar,lfix
C Local parameters:
      integer:: i , j , ibas , ic , iprint , ngnmx , igen , mxint , 
     .modes
      real(8) ,allocatable :: wk_rv(:)

      double precision qlat(3,3),vol,platt(9)
      logical lsmall,latvec
      parameter(ngnmx=10)
      double precision gen(9,ngnmx),agen(3,ngnmx)
C heap:
      integer ::iwdummy

C External calls:
ckino del defdr,defi,rlse
      external  addbas,dcopy,dinv33,
     .icopy,iprint,spcgrp,
     .symcry,symlat

      call rxx(.not. lcar, 'gensym not implemented lcar')
      call rxx(lfix,  'gensym not implemented lfix')
      call rxx(lsmall,'gensym not implemented lsmall')

C --- Reciprocal lattice vectors ---
      call dinv33(plat,1,qlat,vol)

C --- Symmetry group as given by input generators ---
      nwgens = gens
      modes = 0
      call words(gens,ngen)
      if (ngen .gt. 0) then
        call word(gens,ngen,i,j)
        if (gens(i:j) .eq. 'point') then
          j = i-1
          modes = 1
        endif
        call psymop(gens(1:j),platcv,gen,agen,ngen)
        nwgens = gens(1:j)
      endif

C ... Rotate the generators
      call pshpr(iprint()-11)
      call lattdf ( - ldist , dist , plat , 0 , iwdummy , ngen , gen 
     . )

      call poppr
      do  10  igen = 1, ngen
        call grpprd(gen(1,igen),plat,platt)
C       call dmpy(gen(1,igen),3,1,plat,3,1,platt,3,1,3,3,3)
        if (.not. latvec(3,1d-5,qlat,platt))
     .  call fexit(-1,111,' Exit -1 GENSYM: '//
     .  'generator %i imcompatible with underlying lattice',igen)
   10 continue

C ... Set up space group (g,ag,ng) given point group generators gen
      call sgroup(10+modes,gen,agen,ngen,g,ag,nggen,ngmx,qlat)
      ng = min(nggen,ngmx)
      if (nggen .gt. ngmx) return

C --- Add new atoms to the basis according to symmetry ---
      if (usegen .lt. 2) then
        call addbas(fptol,bas,slabl,ips,nbas,ng,qlat,g,ag)
      endif
C ... Make nrspec ... i should be nspec
      i = mxint(nbas,ips)
      if (i .ne. nspec .and. iprint() .gt. 0)
     .call awrit2(' GENSYM (warning) %i species supplied but only '//
     .'%i spec used ...%N%8fpossible errors in class data',' ',120,6,
     .nspec,i)
      nspec = i
      call iinit(nrspec,nspec)
      do  22  ibas = 1, nbas
        ic = ips(ibas)
        nrspec(ic) = nrspec(ic)+1
   22 continue

C --- check if unit cell is the smallest possible one (not implemented)
C      call chkcel(alat,bas,csym,ips,isym,lsmall,nbas,nspec,
C     .            nrspec,plat,qlat)

C --- Complete the space group ---
      if (usegen .eq. 0) then
C       call rotlat(alat,bas,csym,isym,lfix,nbas,plat,qlat)
C   ... Symmetry of lattice without basis
        call symlat(plat,ng,g,isym(1))
C   ... Symmetry of lattice with basis
        allocate(wk_rv(3*nbas))

C       call prmx('pos',bas,3,3,nbas)
        call symcry ( fptol , bas , wk_rv , ips , nbas , nspec , nrspec 
     .  , ng , plat , qlat , g , ag , istab )

        if (allocated(wk_rv)) deallocate(wk_rv)

        if (ng .gt. ngmx) return
C       ngen = 0
        nwgens = ' '
        call groupg(0,ng,g,ag,plat,ngen,gen,agen,nwgens,nggen)
      else
        nggen = 0
        call symtbl ( 0 , fptol , nbas , iwdummy , bas , g , ag , ng 
     .   , qlat , istab )

      endif

C --- Make istab2 ---
C      do  i = 1, ng
C        do  ibas = 1, nbas
C          ic = istab(ibas,i)
C          istab2(ic,i) = ibas
C        enddo
C      enddo

      if (iprint() .ge. 80 .and. ng .gt. 1) then
        call info0(0,0,0,
     .  ' GENSYM: site permutation table for group operations ...')
        call shoist(istab,nbas,ag,g,ng)
C       call shoist(istab2,nbas,ag,g,ng)
      endif

C     pause

C --- Adjust basis to conform with symops to numerical precision ---
      if (fptol .gt. 0) then
        call fixpos(bas,nbas,fptol,ng,plat,g,ag,istab)
      endif

C  ... debugging
C      call shoist(istab,nbas,ag,g,ng)
C      call symtbl(0,nbas,w,bas,g,ag,ng,qlat,istab)
C      call shoist(istab,nbas,ag,g,ng)
C
C      call symtab(nbas,w,bas,g,ag,-ng,plat,qlat,w,istab)
C      call shoist(istab,nbas,ag,g,ng)
C      call symtbl(1,nbas,w,bas,g,ag,ng,qlat,istab)
C      call shoist(istab,nbas,ag,g,ng)
C      stop

      end


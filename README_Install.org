#+TITLE: install ecalj
#+Author: takao kotani
#+email: takaokotani@gmail.com

* We unify source code under SRC/
SRC/ 
├── TestInstall : GW install test 
├── exec        : Makefile and scripts
├── main        : All main *.F
├── subroutines : All subrouitnes. *.F
└── wanniergw  :  Maxloc Wannier related source codes *.F and scripts 
                  Wannier part is separated because we will throw it away, because
                  we are moving to MTO-based localized basis.

All fortran codes are in main/ subrouitnes/ and wanniergw/
We have only a makefile which generates all required binaries in exec/.

* How to install 

To install, you have to do these steps. 
 1. Get ecalj package and some required softwares.
 2. Make and install
 3. Install test.
 4. Install crystal structure tools. Viewer, converter, BZ and symmetry line generators. These are at ecalj/StructureTool and eecalj/GetSyml.

You can perform steps 2,3 and 4 just by a command. That is
#+begin_src
InstallAll.foobar 
#+end_src
at ecalj/. Please look into the file at first.

Current version (aug2020) uses MPI-fortran compilar.
Only one make file we use now at ecalj/SRC/exec where we also includes some scripts files.
All fortran source files are in SRC/subroutines, SRC/main, and SRC/wanniergw.
We now do not generate single core version of lmf-MPIK, lmfgw-MPIK.
Binaries such as lmfa works with single core, however, we use MPI-fortran to make things si

When installation procedure have finished, we have all required binaries and
shell scripts in your ~/bin/ directory, or somewhere else where BINDIR 
specified in InstallAll.foobar. 

Watch InstallAll.foobar show no serious errors. 
As long as all binaries generated, things fine.
But, when you do version up, be careful if error occurs, you may still use old versions,
because the installer may not stop even when linker causes errors.

In the following explanation, we assume gfortran in ubuntu.
We can also use ifort and others in your environment with
minimum changes in Makefiles. 
Let me have your InstallAll.foobar; it is very helpful for us.

For small systems such as Si and GaAs, 
we can use even Ubuntu + gfortran + note PC to observe how QSGW works.
Usually, I expect that you can get QSGW 
band structure of GaAs in half of a day.

** Get ecalj package and get tools.
You may need to install following tools and libraries.  
It dependes on systems. Here is a case of ubuntu.
#+begin_src bash
 sudo apt-get install git  #version control and to get source from github  
 sudo apt-get install gitk #git gui if you like. >gitk --all is convenient to observe git branch.   
 sudo apt-get install gfortran      # GFORTRAN  
 sudo apt-get install openmpi-bin libopenmpi-dev #  or openmpi-dev ?
 sudo apt-get install libfftw3-3     or something else # FFTW  
 sudo apt-get install libblas3gf     or something else # BLAS  
 sudo apt-get install liblapack3gf   or something else  # LAPACK  
 sudo apt-get install csh bash tcsh gawk  # shells  
#+end_src
Some memos here.
+ I think etags is automatically installed when you install emacs in the latest ubuntu. etags is only for developers.
+ We now use python 3 is assumed (usually already in ubuntu. Type \>python (ctrl+D for quit)).
+ Version ctrl, git, which makes things easier. Especiall for version up. >git diff at ecalj/ shows orginal and your modification.

After you have installed git (version control software), you can get ecalj package by  
#+begin_src bash
git clone https://github.com/tkotani/ecalj.git # Get source code  
#+end_src
for ecalj. Or get it in the form *.zip from the page https://github.com/tkotani/ecalj (push zip button). 
I recommend you to use git, to check your changes ($git diff), and know the ecalj version id, and upgrade.
After you did the above git clone command, a directory ecalj/ appears 
(under the directory at which you did git clone).

We can check history of ecalj by ">gitk --all" at ecalj/ directory after you got git clone.


** Steps. 2 and 3 are performed by InstallAll.foobar.
Do
#+begin_src bash
 cd ecalj  
 InstallAll.ifort
#+end_src
(in the case of ifort) at ecalj/. To clean all, do ./CleanAll
You also have InstallAll.gfortran as well.

Please look into the script "InstallAll.ifort". It is a small text file.
It contains the setting of your BINDIR= directory,
to which the InstallAll.ifort will copy all required binaries and scripts.
It internally uses three machine-compilar dependent files at
SRC/exec/make.foobar.inc, which you may need to set for your machine.
At the last stage of the script, it starts a series of automatic tests.

Neglect failure for nio_gwsc; it may show one-failure among two checks.
The test may use fourteen minutes (in my thinkpadT480s)... 
  
InstallAll.ifort may not work for your environment. 
Then you need to prepare your own InstallAll.foobar, 
in which you have to set compilar, linker, compilar options.
When InstallAll.ifort works well, it will show OK! signs finally. 
(Some tests such as nio_gwsc may fail in cases, but usually no problem. 
 Ask to takaokotani@gmail.com if too much errors you observed.).

** Structure tools
You have to install VESTA and make sure that 'viewvesta' command works.
You need to read [[file:GetSyml/README.org][GetSyml/README.org]] to install getsyml.py.
It is useful to get Brillowin zone plot and symmetry line plot in it.
Generated syml.* is used for the band plot in ecalj.

* Clean up:  
If something wrong. 
Do "make clean" or "make cleanall" and start over at SRC/exec.
You can do this by CleanAll at ecalj as well.
Look into Makefile if you like to know what they do.
"make cleanall" removes directory OBJ.foobar/ which contains *.o *.mode.

* Note to Make binaries
We now do not use mpi-compilar only (aug2020).
At aug2020, we now currently unify make files for ecalj
at ecalj/SRC/exec/Makefile.
All required binaries are generated by this makefile.

We now do not generate lmf and lmfgw (old users).
lmf-MPIK and lmfgw-MPIK are needed for the main script of QSGW, gwsc.
lmf-MPIK and lmfgw-MPIK are the k-point parallel versions 
(but there are rooms of parallelization).

note:
You may need to add -heap-arrays 1 (for large calculations. Because we
use large stacksize) to ecalj/lm7K/MAKEINC/Make.inc.ifort_mpi, but I
am not so sure about this.

Let us assume gfortran case.
Move to ecalj/SRC/exec/, 
then do "make PLATFORM=gfortran LIBMATH=xxx". 
Then make process start. 
(LIBMATH= specify BLAS,Lapack, and fftw.)
The ecalj/exec/Makefile contains lines
#+begin_src bash
  PLATFORM=gfortran   #default is PLATFORM=gfortran  
  ...  
  include Make.$(PLATFORM).inc
#+end_src
This means that this Makefile uses Make.gfortran.inc
as a part of the Makefile. Thus we have to check settings in it 
in advance to run "make PLATFORM=ifort", to overwrite 
default setting to read Make.gfortran.inc.

LIBMATH= should contain path to the math libraries, FFTW, BLAS and LAPACK.
An example is   
#+begin_src bash
  LIBMATH="/usr/lib/libfftw3.so.3 /usr/lib/liblapack.so.3gf /usr/lib/libblas.so.3gf"  
#+end_src

Compilar options FFLAGS=, FFLAGS_LESS=... can be choosed by your own
manner. Usually Make.inc.gfortran works without changes
(let me know your changes).
Let us consider ifort case. In this case, we run  
#+begin_src bash
make PLATFORM=ifort LIBMATH='-mkl'   
#+end_src

Parallel make like  
#+begin_src bash
 make -j24 PLATFORM=gfortran  
#+end_src
can speed it up for multicore machines(24 core in this case). 
But it stops because of dependency is not well-described in our current Makefile. 
In such a case, repeat it a few times, or repeat it without -j24.

Finally run  
#+begin_src bash
make PLATFORM=gfortran install  
#+end_src

* Install test at ecalj/SRC/TestInstall.
We have to check whether binaries works fine or not.
For this purpose, we have a test system with make files.
Move to ecalj/SRC/TestInstall. Then type make (with no arguments). 
It shows help about how to do test.
To test all of binaries, just do
>make all  

All tests may require ~10min or a little more.  (nio_gwsc takes ~300sec)
In cases, nio_gwsc fails, showing  
 >FAILED: nio_gwsc QPU compared by ./bin/dqpu  
 >PASSED: nio_gwsc diffnum  

However, we do not need to care its failure sign. (so nio_gwsc test
must be improved...). (numerically small differences).

Help of make (no arguments) at ecalj/TestInstall, shows
>make lmall   !tests only LDA part.  
>make gwall   !tests only GW part.  


* WARN! Some install problems 
If you have some info. I will add it here.
** Compilar bug: 
In cases, we have troubles due to the compilar.
Usually we use -O2 in Make.inc.*. But we may need to use -O1 or -O0 for some files to avoid compilar bugs.
If necessary, you may specify -O0 or something for some *.F files at Make.foobar.inc.

** Ifort 2018 fails tests (or not compiled)
   Version up, please.
** I saw that current ecalj with gfortran4.6 or 4.7 works fine with
  FFLAGS=-O2, but failed with FFLAGS=-O3. (I am not sure now).
** ifort12 may need FFLAGS=-O1 in MAKEINC/Make.inc.ifort. 
  -->Try InstallAll.ifort12.
** We may need -heap-arrays 100 
  (when zero, we had a problem in a version of ifort). 
  In cases, -heap-arrays option did not generate working binaries.
  However, I think "ulimit -s unlimited" before QSGW calculations and
  so on works OK. So, maybe we don't need -heap-arrays option.
** mpiifort works for liker, but mpif90 did not... 
  (but opposite case maybe). Need to set this in lm7K/MAKEINC/Make.inc.ifort
  lm7K/MAKEINC/Make.inc.ifort_mpik and fpgw/exec/make.inc.ifort
  (FC and LK variables).

** Move binaries to your bin by 
make install at ecalj/lm7K. It just moves all requied binaries to your ~/bin.
In advance, you have to make your bin, and add ~/bin to  your path
(e.g. "export PATH=$HOME/bin:$PATH" in .bashrc . Then login again or "source .bashrc")

** Q. What is soft link foo -> bar?  A. "foo" is an alias of the file "bar"  ***

Then you have to run  
>make  
>make install  

Before this, you have to set blas and lapack in fpge/exec/make.inc.
(for ifort, -mkl is enough. LIBMATH= should be the same as that in Make.inc.*.
"make install" copy requied files to your ~/bin.

** We often see "Segmentation fault"due to stacksize limit 
(See the size by a command "ulimit -a"). 
It is needed to run "ulimit -s unimited" in the job-submition script 
or before running GW jobs. 




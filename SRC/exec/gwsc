#!/usr/bin/env python3
# -*- coding:utf-8 -*-
'''
QSGW calculation with MPI.
'''
import os, datetime, shutil, glob,sys
from gwutil import *
target,nloop,ncore,ncore2,option=gwsc_args()
epath=os.path.dirname(os.path.abspath(__file__))
try:
    tmp=[int(s.strip('QPU.').strip('run')) for s in os.listdir() if 'QPU.' in s]
    Iter0=max(tmp) if len(tmp)!=0 else -1
except:
    Iter0=-1
if(nloop==0):
    nloop=1
    print('WARN: We replace ITERADD=0 with ITERADD=1 because of backward compatibility.')
initxt="### START gwsc: ITERADD= %d, MPI size=  %d, %d TARGET= %s"%(nloop,ncore,ncore2,target)
#        if ncore==ncore2 else
#        "### START gwsc: NITER= %d, MPI size=  %d, %d, TARGET= %s"%(nloop,ncore,ncore2,target))
print(initxt,flush=True)
gen_dir('SEBK')
gen_dir('STDOUT')
sigm_name='sigm.%s'%target
rst_name ='rst.%s'%target

# Set up sigm file and softlike sigm.foobar ##########################
if os.path.islink(sigm_name):
    pass
elif os.path.isfile(sigm_name):
    shutil.move(sigm_name,'sigm')

if os.path.isfile('sigm'):
   if not os.path.islink(sigm_name): os.symlink('sigm',sigm_name)
   print('--- sigm is softlinked to '+sigm_name, ' ---',flush=True)

# main iteration ###################################
if(Iter0!=-1): print('We found QPU.%run'%Iter0)
targets=' '+target+' '+option+' '
for i in range(1,nloop+1): #nloop is the additional number of iteration
    niter=i+Iter0
    #if(niter==0 and os.path.isfile(sigm_name)): rm_files(glob.glob('sigm*'))
    print('===== %dth iteration start ======'%niter,flush=True)
    if os.path.isfile(sigm_name):
        print("---> We use existing sigm file",flush=True)
        run_program(epath+'/lmf'+targets+'>llmf',ncore)
    else:
        print("---> No sigm. LDA caculation for eigenfunctions ",flush=True)
        run_program(epath+'/lmf'+targets+'>llmf_lda',ncore)
        shutil.copy(rst_name,rst_name+'.lda')
    rm_files(glob.glob('ewindow.%s*')+glob.glob('qbyl.%s*'%target)+glob.glob('eigze*.%s*'%target)+glob.glob('mixm*%s*'%target))
    #gw initialize
    run_program(epath+'/lmf'+targets+'--jobgw=0 >llmfgw00',1)
    run_program(epath+'/qg4gw --job=1 > lqg4gw',1)
    run_program(epath+'/lmf'+targets+'--jobgw=1 >llmfgw01',ncore)
    ##### main stage of gw ####
    run_program(epath+'/rdata4gw_v2 > lrdata4gw_v2',1) #prepare files
    mv_files(glob.glob('norm*'),'STDOUT')
    rm_files(['gwa']+glob.glob('gwb*'))
    run_program(epath+'/heftet --job=1 > leftet',1)       # A file EFERMI for hx0fp0
    ### Core part of the self-energy (exchange only) ###
    run_program(epath+'/hbasfp0 --job=3 >lbasC',1)          # Product basis generation
    run_program(epath+'/hvccfp0 --job=3 > lvccC', ncore) # Coulomb matrix for lbasC
    run_program(epath+'/hsfp0_sc --job=3 >lsxC',ncore2) # Sigma from core1
    mv_files(glob.glob('stdout*'),'STDOUT')
    ### Valence part of the self-energy Sigma ###
    run_program(epath+'/hbasfp0 --job=0 > lbas',1)        # Product basis generation
    run_program(epath+'/hvccfp0 --job=0 > lvcc',ncore) # Coulomb matrix for lbas
    run_program(epath+'/hsfp0_sc --job=1 >lsx',ncore2) # Exchange Sigma
    mv_files(glob.glob('stdout*'),'STDOUT')
    run_program(epath+'/hx0init --job=11 > lx0init',ncore2)    #x0 part
###    run_program(epath+'/hx0zmel > lx0zmel',ncore2)   #x0 part
    run_program(epath+'/hrcxq > lrcxq',ncore2)       #x0 part
#    run_program(epath+'/hhilbert > lhilbert',ncore2) #x0 part
    mv_files(glob.glob('stdout*'),'STDOUT')
    run_program(epath+'/hsfp0_sc --job=2> lsc',ncore2) #correlation Sigma
    mv_files(glob.glob('stdout*'),'STDOUT')
    run_program(epath+'/hqpe_sc > lqpe',1)        #all Sigma are combined.
    ### final part of iteration loop. Manupulate files ###
    remove(sigm_name)
    os.symlink('sigm',sigm_name)
    mv_files(glob.glob('SEX*')+glob.glob('SEC*')+glob.glob('XC*'),'SEBK')
    for f in ['sigm','QPU','QPD','TOTE.UP','TOTE.DN','lqpe','lsc','lsx','lx0','llmfgw01','evecfix.chk','llmf','ESEAVR']:
        if os.path.isfile(f):
            shutil.copy(f,f+'.%drun'%niter)
    if i==0 and Iter0!=0 and nloop!=0:
        run0='RUN0'
        gen_dir(run0)
        run_program(epath+'/lmf'+targets+'>llmf_oneshot',ncore)
        cp_files(['ctrl.%s'%target,rst_name,sigm_name,'llmf_oneshot','save.%s'%target],run0)
    rundir='RUN.ITER%d'%niter
    gen_dir(rundir)
    cp_files(['ctrl.%s'%target,rst_name,sigm_name,'GWinput','save.%s'%target],rundir)
    print('===== %dth iteration over ====='%niter,flush=True)
### finally we have llmf_gwscend ###
rm_files(glob.glob('ewindow.%s*')+glob.glob('qbyl.%s*'%target)+glob.glob('eigze*.%s*'%target)+glob.glob('mixm*%s*'%target))
run_program(epath+'/lmf'+targets+'>llmf_gwscemd.%d'%niter,ncore)
run_program('echo end of llmf_gwscemd')
if nloop==0:
    run0='RUN0'
    gen_dir(run0)
    cp_files(['ctrl.%s'%target,rst_name,sigm_name,'llmf_gwscend.%d'%niter,'save.%s'%target],run0)
    argv=''
    print('OK! ==== All calclation finished for  gwsc %s ===='%argv)

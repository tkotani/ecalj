#!/usr/bin/env python3
# This routine checks module-dependency in fortran90 and compile them in right order.
#
import os
import sys,subprocess
#import string
import re

#---------------------
def connect(alist):
        result=''
        for lll in alist:
                result = result + ' ' + lll
        return result

tmp ='chekckmodule.tmp'
src  = connect(sys.argv[1:])
print( '######### check module ############# ')
#print( '######### check module ############# src =', src)
#os.system("make ")
zzz='grep -i --regexp="^\ *[Mm][Oo][Dd][Uu][Ll][Ee]" ' + src + ' >' + tmp
#print(zzz)
subprocess.call(zzz,shell=True)
#sys.exit()
oxx = open(tmp,'rt').read()
oxx = oxx.split('\n')

Rule={}
for iline in oxx:
        if len(iline)==0 : continue
        modulef = iline.split()[0].replace(':','')
        #if string.split(iline)[2].lower()=="procedure": continue
        if iline.split()[2].lower()=="procedure": continue
        print( ' === Module', iline.split()[2],' is defined in ', modulef)

        zzz= 'grep -i ' + iline.split()[2] + ' ' + src +'|grep -i use'
        os.system( zzz +' > ' + tmp)
        #print( 'zzzzzzzzzzzz',zzz)
        oww = open(tmp,'rt').read().split('\n')
        for ilinex in oww:        
                if(len(ilinex)==0): continue
                usef = ilinex.replace(':',' ').split()[0]
                #print(Rule)
                #print(  ' Rulexxx   ', modulef,' < ',usef, modulef in Rule, modulef!=usef)
                if(  (modulef in Rule) == False and modulef != usef):
                        aaa=[]
                        Rule[modulef]= aaa + [usef]
                elif(modulef != usef):
                        aaa = Rule[modulef]
                        Rule[modulef]= aaa + [usef]
print() 
#print ' ------- Obtained Rules -------- '
#for k in Rule.keys():
#	print k, ' must be compiled before ', Rule[k]
#        print 
#print Rule

vvv=[]
for k in Rule.keys():
	vvv=vvv+Rule[k]
#print '===================vvv=================='
#print vvv
#print 'vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'
i=-1
RuleN={}
for f0 in Rule.keys():
        print( 'fff0=',f0,vvv.count(f0))
        if(vvv.count(f0)>0): continue
        fin = f0
        for fout in Rule[fin]:
                if(fin==fout): continue
                print( ' rule: ', fin,fout)
                i=i+1
                RuleN[i]= [ fin,fout ]
                fin2 = fout
                if((fin2 in Rule)):
                        for fout2 in Rule[fin2]:
                                if(fin2==fout2): continue
                                nn=5
                                print( nn*" "+' rule: ', fin2,fout2)
                                i=i+1
                                RuleN[i]=[fin2,fout2]


                                fin3 = fout2
                                if((fin3 in Rule)):
                                        for fout3 in Rule[fin3]:
                                                if(fin3==fout3): continue
                                                nn=10
                                                print( nn*" "+' rule: ', fin3,fout3)
                                                i=i+1
                                                RuleN[i]=[fin3,fout3]

        
                                                fin4 = fout3
                                                if((fin4 in Rule)):
                                                        for fout4 in Rule[fin4]:
                                                                if(fin4==fout4): continue
                                                                nn=15
                                                                print( nn*" "+' rule: ', fin4,fout4)
                                                                i=i+1
                                                                RuleN[i]=[fin4,fout4]
                                                                

                                                                fin5 = fout4
                                                                if(fin5 in Rule):
                                                                        for fout5 in Rule[fin5]:
                                                                                nn=15
                                                                                if(fin5==fout5): continue
                                                                                print( nn*" "+' rule: ', fin5,fout5)
                                                                                i=i+1
                                                                                RuleN[i]=[fin5,fout5]


                                                                                fin6 = fout5
                                                                                if((fin6 in Rule)):
                                                                                        print( 'Too deep dependency for checkmodule---modify check module!')

                                                                                
####for f0 in Rule.keys():
####        if(vvv.count(f0)>0): continue
####        os.system("make " + string.replace(f0,'.F','.o'))
aaa=''
for irule in range(len(RuleN)):
        f0 = RuleN[irule][0]
        f1 = RuleN[irule][1]
        f0o = re.sub('.F$','.o', RuleN[irule][0])
        f1o = re.sub('.F$','.o', RuleN[irule][1])
#        print ' Rule:  older;newer =', f0o,';',f1o
        aaa=aaa +f1o+':'+f0o+'\n'
oxx = open("moduledepends.inc",'wt')
oxx.write(aaa)

sys.exit()

#print '--------------------------------------'


######################################################
#### All files are compiled from .f to .o ############
######################################################
repeatmake=0
for irule in range(len(RuleN)):
        f0 = RuleN[irule][0]
        f1 = RuleN[irule][1]
        f0o = re.sub('.F$','.o', RuleN[irule][0])
        f1o = re.sub('.F$','.o', RuleN[irule][1])
        
#check 0        
        make0=0
        if(os.access(f0o,os.F_OK)==0 ): make0=1
        os.system('ls -rt '+ f0o +' '+ f0  +' > '+ tmp)
        occ = open(tmp,'rt').read().split()
        if(occ[0]== f0o):make0=1
        if(make0==1):
#                os.system("rm   "+ f0o )
#                os.system("make "+ f0o )
                repeatmake=1
#check 1        
        make1=0
        if(os.access(f1o,os.F_OK)==0 ): make1=1
        os.system('ls -rt '+ f1o +' '+ f1  +' > '+ tmp)
        occ = open(tmp,'rt').read().split()
        if(occ[0]== f1o):make1=1
        if(make1==1):
#                os.system("rm   "+ f1o )
#                os.system("make "+ f1o )
                repeatmake=1

#check f0o < f1o        
        print( ' Rule:  older;newer =', f0o,';',f1o,)
        os.system('ls -rt '+ f0o +' '+ f1o  +' > '+ tmp)
        occ = open(tmp,'rt').read().split()
#        print '                     ',occ[0],' is older now...',
#        print
        if(occ[0]== f1o):
                print( '  ----> NO!',)
                print( ' goto make...')
#                os.system("rm   "+ f1o )
#                os.system("make "+ f1o )
                repeatmake=1
        else:
                print( '\t--> YES!')
        

print ('### end of checkmodule ###')
if(repeatmake==0): print( '     OK! Right time-stamps for module dependency!')
if(repeatmake==1): print( '     checkmodule found wrong order of compilation!')
if(repeatmake==1): print( '     So checkmodule recompiled them!')
if(repeatmake==1): print( ' ### Thus you have to repeat make! ###')

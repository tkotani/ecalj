### This file is not machine-dependent. #####
####################################################
# How to install. 
# 1. Set $PLATFORM of your machine. 
#   Make.inc.$PLATFORM should exist.
# 2.You may need gnumake. MAKE=gmake
# 3. Type like
#    > make PLATFORM=gfort
####################################################
PLATFORM= gfortran
BINDIR= $(HOME)/bin

#-------------------------------------------------------
obj_path= OBJ.$(PLATFORM)

main_src= ../mainlm/
subs_src= ../srclm/
moddir = $(obj_path)
module = -J$(moddir) -I$(moddir)

main   = ../maingw/
gwsrc  = ../srcgw/
maxloc = ../wanniergw/
#moddir = MODDIR
module = -J$(moddir) -I$(moddir)
#tags   = ../

all: mkobj progs
mkobj:
	@[ -d $(obj_path) ] || mkdir  $(obj_path) 

include Make.$(PLATFORM).inc
include makesrc.inc
include moduledepends.$(PLATFORM).inc #this is automatically generated by init targer around
#include moduledepends.inc

.PHONY:  progs clean cleanbin cleanall init xxx
.SUFFIXES: .o .F90 .F .mod

LIBOBJ=$(addprefix ./$(obj_path)/,$(subs_list))
GWLIB= $(addprefix ./$(obj_path)/,$(GWLIB_list))
MLOC = $(addprefix ./$(obj_path)/,$(MLOC_list))
MPI  = $(addprefix ./$(obj_path)/,$(MPI_list))
$(obj_path)/%.o: $(subs_src)%.F
	$(FC) $(FFLAGS) -c $< -o $@ 
$(obj_path)/%.o: $(subs_src)%.F90
	$(FC) $(FFLAGS) -c $< -o $@ 
$(obj_path)/%.o: $(gwsrc)%.F
	$(FC) $(FFLAGS) -c $< -o $@ 
$(obj_path)/%.o: $(gwsrc)%.F90
	$(FC) $(FFLAGS) -c $< -o $@
$(obj_path)/%.o: $(maxloc)%.F
	$(FC) $(FFLAGS) -c $< -o $@ 
$(obj_path)/%.o: $(maxloc)%.F90
	$(FC) $(FFLAGS) -c $< -o $@ 
$(obj_path)/%.o: $(main)%.F
	$(FC) $(FFLAGS) -c $< -o $@ 
$(obj_path)/%.o: $(main)%.F90
	$(FC) $(FFLAGS) -c $< -o $@ 

#%.o:%.F
#	$(FC) $(FFLAGS) -c $<
#%.o:%.F90
#	$(FC) $(FFLAGS) -c $<

xxx:
	echo $(GWLIB)
	echo $(LIBOBJ)
	echo $(MLOC)

# version info
result_fc_version :=$(shell LANG=us; ${FC} -v 2>&1|tail -1)
result_uname_a := $(shell uname -a | head -c 120)
result_linked_at := $(shell LANG=us; date)
#result_etc_issue := $(shell cat /etc/issue|head -1 -c120)
result_etc_issue := $(shell grep -v \"^\$\" /etc/issue | head -1 )
result_git_branch := $(shell cat ../../.git/HEAD| sed 's/^ref: *//')
result_git_commit := $(shell cat ../../.git/`cat ../../.git/HEAD| sed 's/^ref: *//' `)
result_fflags := $(shell echo ${FFLAGS} | head -1 -c 120)
result_libloc := $(shell echo ${LIBLOC} | head -1 -c 120)

VERSIONFLAGS = -D___UNAME_A___="\"$(result_uname_a)\""   \
    -D___LINK_TIME___="\"$(result_linked_at)\"" \
    -D___ETC_ISSUE___="\"$(result_etc_issue)\"" \
    -D___GIT_BRANCH___="\"$(result_git_branch)\"" \
    -D___GIT_COMMIT___="\"$(result_git_commit)\"" \
    -D___PLATFORM___="\"$(PLATFORM)\"" \
    -D___FC_VERSION___="\"$(result_fc_version)\"" \
    -D___FFLAGS___="\"$(result_fflags)\"" \
    -D___LIBLOC___="\"$(result_libloc)\""

########################################
# Generate o of main routines
########################################
$(obj_path)/lmf.o: $(main_src)lmv7.F $(LIBOBJ)
	$(FC) $(FFLAGS_NONE) -DLMF -c $< -o $@
$(obj_path)/lmchk.o: $(main_src)lmv7util.F 
	$(FC) $(FFLAGS_NONE) -DLMCHK -DFP -c $< -o $@
$(obj_path)/lmfa.o: $(main_src)lmfav7.F 
	$(FC) $(FFLAGS_NONE) -DLMFA -c $< -o $@
$(obj_path)/lmdos.o: $(main_src)lmv7util.F 
	$(FC) $(FFLAGS_NONE) -DLMDOS -c $< -o $@
$(obj_path)/lmfgw.o: $(main_src)lmv7.F 
	$(FC) $(FFLAGS_NONE) -DLMF -DLMFGWD -c $< -o $@
$(obj_path)/lmf2gw.o: $(main_src)lmf2gw.F 
	$(FC) $(FFLAGS_NONE) -c $< -o $@
$(obj_path)/lmfham1.o: $(main_src)lmfham1.F
	$(FC) $(FFLAGS_NONE) -c $< -o $@
$(obj_path)/show_programinfo.o: $(subs_src)show_programinfo.F  $(main_src)*.F $(subs_src)*.F 
	$(FC) $(FFLAGS) $(VERSIONFLAGS) $(CPP_SW) -c $< -o $@
$(obj_path)/show_programinfo_mpik.o:  $(subs_src)show_programinfo.F $(main_src)*.F $(subs_src)*.F 
	$(FC) $(FFLAGS)  $(VERSIONFLAGS) $(CPP_SW) -c $< -o $@
$(obj_path)/lmf-MPIK.o: $(main_src)lmv7.F $(LIBOBJ)
	$(FC) $(FFLAGS_NONE) -DLMF -c $(main_src)lmv7.F -o $@
$(obj_path)/lmfgw-MPIK.o: $(main_src)lmv7.F
	$(FC) $(FFLAGS_NONE) -DLMF -DLMFGWD -c $(main_src)lmv7.F -o $@

########################################
# programs
########################################
lmfa:	$(obj_path)/lmfa.o $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $(obj_path)/$@.o $(LIBOBJ) $(LIBLOC) $(LKFLAGS2) -o $@
# lmf:	$(obj_path)/lmf.o $(LIBOBJ) 
# 	@echo $(LK) $@.o 'link with *.o'
# 	@$(LK) $(LKFLAGS1) $(obj_path)/$@.o $(LIBOBJ) $(LIBLOC) $(LKFLAGS2) -o $@
lmchk:	$(obj_path)/lmchk.o $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $(obj_path)/$@.o $(LIBOBJ) $(LIBLOC) $(LKFLAGS2) -o $@
lmdos:	$(obj_path)/lmdos.o $(LIBOBJ) 
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $(obj_path)/$@.o $(LIBOBJ) $(LIBLOC) $(LKFLAGS2) -o $@
# lmfgw:	$(obj_path)/lmfgw.o $(LIBOBJ)
# 	@echo $(LK) $@.o 'link with *.o'
# 	@$(LK) $(LKFLAGS1) $(obj_path)/$@.o $(LIBOBJ) $(LIBLOC) $(LKFLAGS2) -o $@
lmf2gw:	$(obj_path)/lmf2gw.o $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(FC) $(LKFLAGS1) $(obj_path)/$@.o $(LIBOBJ) $(LIBLOC) $(LKFLAGS2) -o $@
lmfham1: $(obj_path)/lmfham1.o $(LIBOBJ) 
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $(obj_path)/$@.o $(LIBOBJ) $(LIBLOC) $(LKFLAGS2) -o $@
lmf-MPIK: $(obj_path)/lmf-MPIK.o $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $(obj_path)/$@.o $(LIBOBJ) $(LIBLOC) $(LKFLAGS2) -o $@
lmfgw-MPIK: $(obj_path)/lmfgw-MPIK.o $(LIBOBJ) 
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $(obj_path)/$@.o $(LIBOBJ) $(LIBLOC) $(LKFLAGS2) -o $@

###################################################
progs: $(programs)
clean:
	rm -f $(programs)  

cleanbin:
	rm -f $(programs) 

cleanall:
	rm -rf $(programs) $(obj_path) moduledepends.*
init:
	rm moduledepends.*
moduledepends.inc: 
	exec ../../TOOLS/checkmodule $(subs_src)*.F $(main_src)*.F $(gwsrc)*.F $(main)*.F $(maxloc)*.F

moduledepends.$(PLATFORM).inc: moduledepends.inc
	sed -e "s/\.\.\/\w*\//$(obj_path)\//g" moduledepends.inc >moduledepends.$(PLATFORM).inc
dep:
	@echo 'This generate a call-caller data set for lmv7.F fp/*.F and subs/\*.F subs/*.F90 slatsm/*.F .'
	@echo 'No arguments required. This drives ../TOOLS/f_calltree.py '
	@echo 'HELP --> ../TOOLS/FparserTools/f_calltree.py --help, and read CallCaller.sh'
	@echo
	@echo '--- Now generating a file 'callcaller.dat' ... Wait!!! It takes 1 minute or so!'
	@echo '   If you like to apply this to other programs, modify this script'
	@echo ' NOTE: T.Kotani is not sure whether this is reliable enough .. let me know something wrong...'
	../TOOLS/FparserTools/f_calltree.py lmv7.F ../subs/*.F subs/*.F90 >callcaller.dat 2>callcaller.err
	-egrep -e '^(ERROR|Error)' callcaller.err
	@echo
	@echo '------------------------------------------------------------------------------'
	@echo '--- If no ERROR is shown above (if ERROR is not in callcaller.err), it is succeeded. ---'
	@echo '       Note that Unsed files might be used by other mainprogram.'
	@echo '--- If ERROR is shown above, look into callcaller.err. Something wrong.'
	@echo 
	@echo ' If you want to make a callcaller-tree picture, try'
	@echo ' >GenCCtree.sh callcaller.dotdata'
	@echo ' --> Then you get ccmap.ps.; it is better to use smaller callcaller.dotdata(need to modify this script to make it).' 
	@echo ' Note that you need graphviz for GenCCtree.sh. as apt-get install graphviz'

install: 
	cp $(programs) $(fplotprogs) ctrlgenM1.py job* run_arg  $(BINDIR)


#################################################################################

progs  = hbasfp0 hvccfp0 hx0fp0 hsfp0 hef hqpe hqpe_qsgw qg4gw gwinit heftet hmergewv rdata4gw_v2 convgwin hx0fp0_sc hsfp0_sc hqpe_sc kino_input_test hecor eout eout2 hmagnon hhomogas
progsw= huumat hpsig hmaxloc huumat_MPI hpsig_MPI wanplot hwmatK hwmatK_MPI htbplot # hx0fp0_mlw 
progs2 = $(progs) $(progsw) $(tags)TAGS 
scriptw = genMLWF genMLWF_vw genMLWF2 genMLWFmod run_argloc RPAWannier* FLEX_interaction.py
script = cleargw* dqpu eps* gw* mkG* chipm_mat $(scriptw)

all : mkmoddir $(progs2) 

mkmoddir:
	[ -d $(moddir) ] || mkdir  $(moddir) 

clean:  
	 rm -f  $(progs) $(progsw)

install:  
	 cp  $(progs) $(progsw) $(BINDIR)

install2:  
	 cp  $(script) $(BINDIR)

cleanall:  
	 rm -f  $(progs2) $(main)*.o $(gwsrc)*.o  *.mod  $(moddir)/*.mod $(tote)*.o  $(maxloc)*.o

doxygen:
	cd $(tags);doxygen;cd ./latex;make
	echo 'fpgw/latex/refman.pdf generated'

dep:
	@echo  'This generate a call-caller data set for fpgw/'
	@echo  'HELP --> ../TOOLS/FparserTools/f_calltree.py --help, and read CallCaller.sh'
	@echo
	@echo  '--- Now generating a file 'callcaller.dat' ... Wait!!! It takes 1 minute or so!'
	@echo '        If you like to apply this to other programs, modify this script'
	@echo  ' NOTE: T.Kotani is not sure whether this is relaiable enough or not... let me know something wrong...'
	$(tags)/../TOOLS/FparserTools/f_calltree.py $(main)/*.F $(gwsrc)/*.F $(tote)/*.F >callcaller.dat 2>callcaller.err
	-egrep -e '^(ERROR|Error)' callcaller.err
	@echo
	@echo '------------------------------------------------------------------------------'
	@echo '--- If no ERROR is shown above (if ERROR is not in callcaller.err), it is succeeded. ---'
	@echo '       Note that Unsed files might be used by other mainprogram.'
	@echo '--- If ERROR is shown above, look into callcaller.err. Something wrong.'
	@echo 
	@echo ' If you want to make a callcaller-tree picture, try'
	@echo ' >GenCCtree.sh callcaller.dotdata'
	@echo ' --> Then you get ccmap.ps.; it is better to use smaller callcaller.dotdata(need to modify this script to make it).' 
	@echo ' Note that you need graphviz for GenCCtree.sh. as apt-get install graphviz'

# This is necesaly to compile *.f in right order.
# When you recompile and link, just repeat 'make' (not necessary to repeat 'make init').
# When checkmodule recompile source, you have to repeat 'make'.
#init:
#	rm moduledepends.*
#moduledepends.inc: 
#	exec ../../TOOLS/checkmodule $(gwsrc)*.F $(main)*.F $(maxloc)*.F

hecor:  $(main)hecor.o $(GWLIB)  $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI)  $(LIBOBJ) $(LKFLAGS2) -o $@
eout:   $(main)eout.o  $(GWLIB) $(MPI)  $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI)  $(LIBOBJ) $(LKFLAGS2) -o $@
eout2: $(main)eout2.o  $(GWLIB) $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI)  $(LIBOBJ) $(LKFLAGS2) -o $@
gwinit:	$(main)gwinit.m.o $(MPI)  $(GWLIB)  $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI)  $(LIBOBJ) $(LKFLAGS2) -o $@
qg4gw:	$(main)qg4gw.m.o  $(MPI) $(GWLIB)  $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI)  $(LIBOBJ) $(LKFLAGS2) -o $@
rdata4gw_v2: $(main)rdata4gw_v2.m.o $(GWLIB) $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI) $(LIBOBJ) $(LKFLAGS2) -o $@

hbasfp0: $(obj_path)/hbasfp0.m.o $(GWLIB) $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI) $(LIBOBJ) $(LKFLAGS2) -o $@
hvccfp0: $(obj_path)/hvccfp0.m.o $(GWLIB) $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI) $(LIBOBJ) $(LKFLAGS2) -o $@
hx0fp0:	 $(obj_path)/hx0fp0.m.o $(GWLIB) $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI) $(LIBOBJ) $(LKFLAGS2) -o $@
hmagnon: $(obj_path)/hmagnon.m.o $(GWLIB) $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI) $(LIBOBJ) $(LKFLAGS2) -o $@
hhomogas: $(obj_path)/hhomogas.m.o $(GWLIB) $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI) $(LIBOBJ) $(LKFLAGS2) -o $@
hx0fp0_sc: $(obj_path)/hx0fp0.sc.m.o $(GWLIB) $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI)  $(LIBOBJ) $(LKFLAGS2) -o $@
hsfp0:	$(obj_path)/hsfp0.m.o $(GWLIB) $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI) $(LIBOBJ) $(LKFLAGS2) -o $@
hsfp0_sc: $(obj_path)/hsfp0.sc.m.o $(GWLIB) $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI)  $(LIBOBJ) $(LKFLAGS2) -o $@
heftet:	$(obj_path)/heftet.m.o $(GWLIB) $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI)  $(LIBOBJ) $(LKFLAGS2) -o $@
hef:	$(obj_path)/hef.m.o $(GWLIB) $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI) $(LIBOBJ) $(LKFLAGS2) -o $@
hqpe:	$(obj_path)/hqpe.m.o  $(GWLIB) $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI) $(LIBOBJ) $(LKFLAGS2) -o $@
hqpe_sc:$(obj_path)/hqpe.sc.m.o  $(GWLIB) $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI)  $(LIBOBJ) $(LKFLAGS2) -o $@
hqpe_qsgw: $(obj_path)/hqpe_qsgw.m.o  $(GWLIB) $(MPI)  $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI) $(LIBOBJ) $(LKFLAGS2) -o $@
hmergewv: $(obj_path)/hmergewv.m.o $(MPI) $(GWLIB) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI) $(LIBOBJ) $(LKFLAGS2) -o $@
convgwin: $(obj_path)/convgwin.o $(MPI) $(GWLIB) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI) $(LIBOBJ) $(LKFLAGS2) -o $@
kino_input_test: $(obj_path)/kino_input_test.o $(GWLIB) $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(GWLIB) $(MPI)  $(LIBOBJ) $(LKFLAGS2) -o $@

hmaxloc: $(maxloc)hmaxloc.o $(MLOC) $(GWLIB) $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(MLOC) $(GWLIB) $(MPI)  $(LIBOBJ) $(LKFLAGS2) -o $@

hpsig: $(maxloc)hpsig.o $(MLOC) $(GWLIB) $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(MLOC) $(GWLIB) $(MPI)  $(LIBOBJ) $(LKFLAGS2) -o $@
hpsig_MPI: $(maxloc)hpsig_MPI.o $(MLOC) $(GWLIB) $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(MLOC) $(GWLIB) $(MPI)  $(LIBOBJ) $(LKFLAGS2) -o $@
huumat:	$(maxloc)huumat.o $(MLOC) $(GWLIB) $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(MLOC) $(GWLIB) $(MPI)  $(LIBOBJ) $(LKFLAGS2)  -o $@

huumat_MPI: $(maxloc)huumat_MPI.o $(MLOC) $(GWLIB) $(MPI)  $(LIBOBJ) $(MPIMLOC)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(MLOC) $(GWLIB) $(MPI)  $(LIBOBJ) $(MPIMLOC) $(LKFLAGS2) -o $@
hwmatK:	$(maxloc)hwmatK.o    $(MLOC) $(GWLIB) $(MPI) $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(MLOC) $(GWLIB) $(MPI)  $(LIBOBJ) $(LKFLAGS2)  -o $@ 
hwmatK_MPI: $(maxloc)hwmatK_MPI.o $(MLOC) $(GWLIB) $(MPI)  $(LIBOBJ) $(MPIMLOC)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(MLOC) $(GWLIB) $(MPI)  $(LIBOBJ) $(MPIMLOC) $(LKFLAGS2)  -o $@ 
wanplot : $(maxloc)wanplot.o ${MLOC} ${GWLIB} $(MPI)  $(LIBOBJ)
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(MLOC) $(GWLIB) $(MPI)  $(LIBOBJ) $(LKFLAGS2)  -o $@ 
htbplot :  $(maxloc)htbplot.o
	@echo $(LK) $@.o 'link with *.o'
	@$(LK) $(LKFLAGS1) $< $(LKFLAGS2) -o $@

####################################################
$(tags)TAGS: $(progs)
	cd $(tags);etags ./*/*/*.F ./*/*.F

# --- Make rules ---
.SUFFIXES:
.SUFFIXES: .F .o
.F.o:
	$(FC) $(FFLAGS) $*.F -c -o $*.o

### fix 
$(gwsrc)wintzsg.o :  $(gwsrc)wintzsg.F
	$(FC)  $(FFLAGS) $(gwsrc)wintzsg.F  -c -o $*.o

o$(maxloc)wanplot.o: $(maxloc)cubeformat.o $(maxloc)xsfformat2.o  


      subroutine gauss(n,a,b,x,w)
c
c subroutine gauss for gaussian integration   76.08.12.
c the integral of f(x) from a to b is given by the sum
c over i from 1 to n of w(i)*f(x(i)).
c maximum n is 48
c
      implicit real*8(a-h,o-z)
      implicit integer(i-n)
      dimension x(n),w(n),e06(3),w06(3),e10(5),w10(5),e12(6),w12(6),
     d          e16(8),w16(8),e20(10),w20(10),e24(12),w24(12),
     d          e32(16),w32(16),e40(20),w40(20),e48(24),w48(24)
      data e06/.238619186083197d0,.661209386466265d0,.932469514203152d0/
      data w06/.467913934572691d0,.360761573048139d0,.171324492379170d0/
      data e10/.148874338981631d0,.433395394129247d0,.679409568299024d0,
     d         .865063366688985d0,.973906528517172d0/
      data w10/.295524224714753d0,.269266719309996d0,.219086362515982d0,
     d         .149451349150581d0,.066671344308688d0/
      data e12/.125233408511469d0,.367831498998180d0,.587317954286617d0,
     d         .769902674194305d0,.904117256370475d0,.981560634246719d0/
      data w12/.249147045813403d0,.233492536538355d0,.203167426723066d0,
     d         .160078328543346d0,.106939325995318d0,.047175336386512d0/
      data e16/.0950125098376374d0,.2816035507792589d0,
     d         .4580167776572274d0,.6178762444026437d0,
     d         .7554044083550030d0,.8656312023878317d0,
     d         .9445750230732326d0,.9894009349916499d0/
      data w16/.1894506104550685d0,.1826034150449236d0,
     d         .1691565193950025d0,.1495959888165767d0,
     d         .1246289712555339d0,.0951585116824928d0,
     d         .0622535239386479d0,.0271524594117541d0/
      data e20/.0765265211334973d0,.2277858511416451d0,
     d         .3737060887154196d0,.5108670019508271d0,
     d         .6360536807265150d0,.7463319064601508d0,
     d         .8391169718222188d0,.9122344282513259d0,
     d         .9639719272779138d0,.9931285991850949d0/
      data w20/.1527533871307259d0,.1491729864726037d0,
     d         .1420961093183821d0,.1316886384491766d0,
     d         .1181945319615184d0,.1019301198172404d0,
     d         .0832767415767047d0,.0626720483341091d0,
     d         .0406014298003869d0,.0176140071391521d0/
      data e24/.0640568928626056d0,.1911188674736163d0,
     d         .3150426796961634d0,.4337935076260451d0,
     d         .5454214713888395d0,.6480936519369756d0,
     d         .7401241915785544d0,.8200019859739029d0,
     d         .8864155270044010d0,.9382745520027328d0,
     d         .9747285559713095d0,.9951872199970214d0/
      data w24/.1279381953467522d0,.1258374563468283d0,
     d         .1216704729278034d0,.1155056680537256d0,
     d         .1074442701159656d0,.0976186521041139d0,
     d         .0861901615319533d0,.0733464814110803d0,
     d         .0592985849154368d0,.0442774388174198d0,
     d         .0285313886289337d0,.0123412297999872d0/
      data e32/.0483076656877383d0,.1444719615827965d0,
     d         .2392873622521371d0,.3318686022821276d0,
     d         .4213512761306353d0,.5068999089322294d0,
     d         .5877157572407623d0,.6630442669302152d0,
     d         .7321821187402897d0,.7944837959679424d0,
     d         .8493676137325700d0,.8963211557660521d0,
     d         .9349060759377397d0,.9647622555875064d0,
     d         .9856115115452683d0,.9972638618494816d0/
      data w32/.0965400885147278d0,.0956387200792749d0,
     d         .0938443990808046d0,.0911738786957639d0,
     d         .0876520930044038d0,.0833119242269468d0,
     d         .0781938957870703d0,.0723457941088485d0,
     d         .0658222227763618d0,.0586840934785355d0,
     d         .0509980592623762d0,.0428358980222267d0,
     d         .0342738629130214d0,.0253920653092621d0,
     d         .0162743947309057d0,.0070186100094701d0/
      data e40/.0387724175060508d0,.1160840706752552d0,
     d         .1926975807013711d0,.2681521850072537d0,
     d         .3419940908257585d0,.4137792043716050d0,
     d         .4830758016861787d0,.5494671250951282d0,
     d         .6125538896679802d0,.6719566846141795d0,
     d         .7273182551899271d0,.7783056514265194d0,
     d         .8246122308333117d0,.8659595032122595d0,
     d         .9020988069688743d0,.9328128082786765d0,
     d         .9579168192137917d0,.9772599499837743d0,
     d         .9907262386994570d0,.9982377097105592d0/
      data w40/.0775059479784248d0,.0770398181642480d0,
     d         .0761103619006262d0,.0747231690579683d0,
     d         .0728865823958041d0,.0706116473912868d0,
     d         .0679120458152339d0,.0648040134566010d0,
     d         .0613062424929289d0,.0574397690993916d0,
     d         .0532278469839368d0,.0486958076350722d0,
     d         .0438709081856733d0,.0387821679744720d0,
     d         .0334601952825478d0,.0279370069800234d0,
     d         .0222458491941670d0,.0164210583819079d0,
     d         .0104982845311528d0,.0045212770985332d0/
      data e48/
     d 0.03238 01709 62869 326033d0 , 0.09700 46992 09462 698930d0,
     d 0.16122 23560 68891 718056d0 , 0.22476 37903 94689 061225d0,
     d 0.28736 24873 55455 576736d0 , 0.34875 58862 92160 738160d0,
     d 0.40868 64819 90716 729916d0 , 0.46690 29047 50958 404545d0,
     d 0.52316 09747 22233 033678d0 , 0.57722 47260 83972 703818d0,
     d 0.62886 73967 76513 623995d0 , 0.67787 23796 32663 905212d0,
     d 0.72403 41309 23814 654674d0 , 0.76715 90325 15740 339254d0,
     d 0.80706 62040 29442 627083d0 , 0.84358 82616 24393 530711d0,
     d 0.87657 20202 74247 885906d0 , 0.90587 91367 15569 672822d0,
     d 0.93138 66907 06554 333114d0 , 0.95298 77031 60430 860723d0,
     d 0.97059 15925 46247 250461d0 , 0.98412 45837 22826 857745d0,
     d 0.99353 01722 66350 757548d0 , 0.99877 10072 52426 118601d0/
      data w48/
     d 0.06473 76968 12683 922503d0 , 0.06446 61644 35950 082207d0,
     d 0.06392 42385 84648 186624d0 , 0.06311 41922 86254 025567d0,
     d 0.06203 94231 59892 663904d0 , 0.06070 44391 65893 880053d0,
     d 0.05911 48396 98398 635746d0 , 0.05727 72921 00403 215705d0,
     d 0.05519 95036 99984 162868d0 , 0.05289 01894 85193 667096d0,
     d 0.05035 90355 53854 474958d0 , 0.04761 66584 92490 474826d0,
     d 0.04467 45608 56694 280419d0 , 0.04154 50829 43464 749214d0,
     d 0.03824 13510 65830 706317d0 , 0.03477 72225 64770 438893d0,
     d 0.03116 72278 32798 088902d0 , 0.02742 65097 08356 948200d0,
     d 0.02357 07608 39324 379141d0 , 0.01961 61604 57355 527814d0,
     d 0.01557 93157 22943 848728d0 , 0.01147 72345 79234 539490d0,
     d 0.00732 75539 01276 262102d0 , 0.00315 33460 52305 838633d0/
      e1 = .5d0*(b - a)
      e2 = e1 + a
      if(n.eq. 6) go to  6
      if(n.eq.10) go to 10
      if(n.eq.12) go to 12
      if(n.eq.16) go to 16
      if(n.eq.20) go to 20
      if(n.eq.24) go to 24
      if(n.eq.32) go to 32
      if(n.eq.40) go to 40
      if(n.eq.48) go to 48
      xl = dsqrt(-e06(1))
Cstop2rx 2013.08.09 kino      stop 'gauss: wrong no. points'
      call rx( 'gauss: wrong no. points')
    6 continue
      do  7 i = 1,3
        ak = e1*e06(i)
        x(i+3) = e2 + ak
        x(4-i) = e2 - ak
        w(i+3) = w06(i)*e1
        w(4-i) = w06(i)*e1
    7 continue
      return
   10 continue
      do 11 i = 1,5
        ak = e1*e10(i)
        x(i+5) = e2 + ak
        x(6-i) = e2 - ak
        w(i+5) = w10(i)*e1
        w(6-i) = w10(i)*e1
   11 continue
      return
   12 continue
      do 13 i = 1,6
        ak = e1*e12(i)
        x(i+6) = e2 + ak
        x(7-i) = e2 - ak
        w(i+6) = w12(i)*e1
        w(7-i) = w12(i)*e1
   13 continue
      return
   16 continue
      do 17 i = 1,8
        ak = e1*e16(i)
        x(i+8) = e2 + ak
        x(9-i) = e2 - ak
        w(i+8) = w16(i)*e1
        w(9-i) = w16(i)*e1
   17 continue
      return
   20 continue
      do 21 i = 1,10
        ak = e1*e20(i)
        x(i+10) = e2 + ak
        x(11-i) = e2 - ak
        w(i+10) = w20(i)*e1
        w(11-i) = w20(i)*e1
   21 continue
      return
   24 continue
      do 25 i = 1,12
        ak = e1*e24(i)
        x(i+12) = e2 + ak
        x(13-i) = e2 - ak
        w(i+12) = w24(i)*e1
        w(13-i) = w24(i)*e1
   25 continue
      return
   32 continue
      do 33 i = 1,16
        ak = e1*e32(i)
        x(i+16) = e2 + ak
        x(17-i) = e2 - ak
        w(i+16) = w32(i)*e1
        w(17-i) = w32(i)*e1
   33 continue
      return
   40 continue
      do 41 i = 1,20
        ak = e1*e40(i)
        x(i+20) = e2 + ak
        x(21-i) = e2 - ak
        w(i+20) = w40(i)*e1
        w(21-i) = w40(i)*e1
   41 continue
      return
   48 continue
      do 49 i = 1,24
        ak      = e1*e48(i)
        x(i+24) = e2 + ak
        x(25-i) = e2 - ak
        w(i+24) = w48(i)*e1
        w(25-i) = w48(i)*e1
   49 continue
      return
      end

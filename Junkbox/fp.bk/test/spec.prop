# Segment of input file containing species properties
#% trace 2
# Required Inputs:
#   *a character variable eltl, e.g. 'cad' listing the names of the various
#    species for which parameters are generated.  Each character in eltl
#    corresponds to one species; thus if eltl='cad' parameters for three
#    species are generated (see below for example)
#   *A character variable 'elt*' for each of the characters in eltl.
#    Thus if eltl='cad' the variables eltc, elta, eltd are required.
#    They  contain the atomic symbol for the element, eg elta='Be'
# Optional Inputs:
#   *variable excf (local ex functional) affects definition of eref
#   *variable nfp nonzero specifies nfp-specific input
#   *variable ofp nonzero specifies old FP-specific input
#   *variable tpan specifying coupled panels (ofp only)
#   *any of variables cnfs{c,a,d}, cnfp{c,a,d}, cnfd{c,a,d}
#    with s,p,d corresponding to the l quantum numbers l=0,1,2.
#    These variables are associated with the atomic principal quantum
#    numbers, specifing what value to take relative to default values.
#    spec.prop generates default values for any not specified.
#    cnfxx= 0 specifies the default P.Q.N
#    cnfxx=-1 specifies a P.Q.N 1 lower than the default.
#    cnfxx= 1 specifies a P.Q.N 1 higher than the default.
#    cnfxx= 2 flags this state has having a shallow semicore state.
#             default P.Q.N is used for the valence state
#             In the ASA, it is likely here that IDMOD should be frozen.
#    cnfxx= 4 flags this state has needing a high-energy valence state
#             combined with a shallow semicore state
# Outputs are in the form of defined variables.  Assuming eltl='cad':
#   *Atomic numbers Z{c,a,d} (real)
#   *Free-atom energies eref{c,a,d} (real)
#   *default values for cnf{s,p,d}{c,a,d} are set for those not spec'd
#   *(nfp) for certain species, a default definition for the nfp basis
#-----------------------------------------------------------------
# local variable tpanxx and ofpxx in case variables haven't been defined
% udef -f ofpxx tpanxx excf
% cconst tpan>-1 tpanxx=tpan
% const tpanxx=0
% cconst ofp>-1 ofpxx=ofp
% const ofpxx=0
% cconst excf>-1 excfxx=excf
% const excfxx=2
% ifndef eltl
%   stop 1 spec.prop (abort): missing variable eltl
% endif
% var ixx=0
% while  ixx+=1 ixx<={eltl(:e)}
%   udef -f Zxx
%   var erefxx=0
%   ifndef elt{eltl(ixx,ixx)}
%     stop 1 spec.prop (abort): missing variable elt{eltl(ixx,ixx)}
%   endif
%   char eltlxx={eltl(ixx,ixx)} eltxx={elt{eltl(ixx,ixx)}}
%   cvar eltxx=='E'  Zxx=0  erefxx=0
%   cvar eltxx=='H'  Zxx=1  erefxx=excfxx==2?0:0
%   cvar eltxx=='Li' Zxx=3  erefxx=excfxx==2?-14.7106:0
%   cvar eltxx=='Be' Zxx=4  erefxx=excfxx==2?-28.9148:0
%   cvar eltxx=='B'  Zxx=5  erefxx=excfxx==2?0:0
%   cvar eltxx=='C'  Zxx=6  erefxx=excfxx==2?-74.9949:0
%   cvar eltxx=='N'  Zxx=7  erefxx=excfxx==2?-108.3613:0
%   cvar eltxx=='O'  Zxx=8  erefxx=excfxx==2?-149.1822:0
%   cvar eltxx=='Fl' Zxx=9  erefxx=excfxx==2?-198.4228:0
%   cvar eltxx=='Na' Zxx=11 erefxx=excfxx==2?-323.3409:0
%   cvar eltxx=='Mg' Zxx=12 erefxx=excfxx==2?-398.9159:0
%   cvar eltxx=='Al' Zxx=13 erefxx=excfxx==2?-483.5463:0
%   cvar eltxx=='Si' Zxx=14 erefxx=excfxx==2?-577.69658:0
%   cvar eltxx=='P'  Zxx=15 erefxx=excfxx==2?-681.7019:0
%   cvar eltxx=='S'  Zxx=16 erefxx=excfxx==2?-795.7136:0
%   cvar eltxx=='Cl' Zxx=17 erefxx=excfxx==2?-920.2358:0
%   cvar eltxx=='K'  Zxx=19 erefxx=excfxx==2?-1201.1108:0
%   cvar eltxx=='Ca' Zxx=20 erefxx=excfxx==2?-1357.3538:0
%   cvar eltxx=='Sc' Zxx=21 erefxx=excfxx==2?-1524.6173:0
%   cvar eltxx=='Ti' Zxx=22 erefxx=excfxx==2?-1703.4890:0
%   cvar eltxx=='V'  Zxx=23 erefxx=excfxx==2?-1894.2951:0
%   cvar eltxx=='Cr' Zxx=24 erefxx=excfxx==2?-2097.3033:0
%   cvar eltxx=='Mn' Zxx=25 erefxx=excfxx==2?-2312.6092:0
%   cvar eltxx=='Fe' Zxx=26 erefxx=excfxx==2?-2540.5681:0
%   cvar eltxx=='Co' Zxx=27 erefxx=excfxx==2?-2781.6524:0
%   cvar eltxx=='Ni' Zxx=28 erefxx=excfxx==2?-3036.1820:0
%   cvar eltxx=='Cu' Zxx=29 erefxx=excfxx==2?-3304.4345:0
%   cvar eltxx=='Zn' Zxx=30 erefxx=excfxx==2?-3586.5189:0
%   cvar eltxx=='Ga' Zxx=31 erefxx=excfxx==2?-3882.1256:0
%   cvar eltxx=='Ge' Zxx=32 erefxx=excfxx==2?-4191.7091:0
%   cvar eltxx=='As' Zxx=33 erefxx=excfxx==2?-4515.4714:0
%   cvar eltxx=='Se' Zxx=34 erefxx=excfxx==2?-4853.4670:0
%   cvar eltxx=='Rb' Zxx=37 erefxx=excfxx==2?-5955.1147:0
%   cvar eltxx=='Sr' Zxx=38 erefxx=excfxx==2?-6351.4281:0
%   cvar eltxx=='Y'  Zxx=39 erefxx=excfxx==2?-6762.5727:0
%   cvar eltxx=='Zr' Zxx=40 erefxx=excfxx==2?-7189.0263:0
%   cvar eltxx=='Nb' Zxx=41 erefxx=excfxx==2?-7631.0823:0
%   cvar eltxx=='Mo' Zxx=42 erefxx=excfxx==2?-8088.9209:0
%   cvar eltxx=='Tc' Zxx=43 erefxx=excfxx==2?-8562.5418:0
%   cvar eltxx=='Ru' Zxx=44 erefxx=excfxx==2?-9052.4204:0
%   cvar eltxx=='Rh' Zxx=45 erefxx=excfxx==2?-9558.7907:0
%   cvar eltxx=='Pd' Zxx=46 erefxx=excfxx==2?-10081.8924:0
%   cvar eltxx=='Ag' Zxx=47 erefxx=excfxx==2?-10621.9685:0
%   cvar eltxx=='Cd' Zxx=48 erefxx=excfxx==2?-11178.8931:0
%   cvar eltxx=='In' Zxx=49 erefxx=excfxx==2?-11752.5630:0
%   cvar eltxx=='Sn' Zxx=50 erefxx=excfxx==2?-12343.4222:0
%   cvar eltxx=='Sb' Zxx=51 erefxx=excfxx==2?0:0
%   cvar eltxx=='Te' Zxx=52 erefxx=excfxx==2?-13577.3544:0
%   cvar eltxx=='Cs' Zxx=55 erefxx=excfxx==2?-15561.2527:0
%   cvar eltxx=='Ba' Zxx=56 erefxx=excfxx==2?-16258.1782:0
%   cvar eltxx=='La' Zxx=57 erefxx=excfxx==2?-16973.2948:0
%   cvar eltxx=='Hf' Zxx=72 erefxx=excfxx==2?-30137.6046:0
%   cvar eltxx=='Ta' Zxx=73 erefxx=excfxx==2?-31189.9017:0
%   cvar eltxx=='W'  Zxx=74 erefxx=excfxx==2?-32265.5134:0
%   cvar eltxx=='Re' Zxx=75 erefxx=excfxx==2?-33364.4264:0
%   cvar eltxx=='Os' Zxx=76 erefxx=excfxx==2?-34487.2370:0
%   cvar eltxx=='Ir' Zxx=77 erefxx=excfxx==2?-35634.0931:0
%   cvar eltxx=='Pt' Zxx=78 erefxx=excfxx==2?-36805.4789:0
%   cvar eltxx=='Au' Zxx=79 erefxx=excfxx==2?-38001.6756:0
%   cvar eltxx=='Hg' Zxx=80 erefxx=excfxx==2?-39222.8479:0
%   cvar eltxx=='Tl' Zxx=81 erefxx=excfxx==2?-40468.8134:0
%   ifndef Zxx>=0
%     stop 1 spec.prop: no atomic number for element '{eltxx}'
%   endif
#
%   var cnfsxx=0 cnfpxx=0 cnfdxx=0
# --- These cations have very shallow s,p semicore states
% cvar Zxx==12|Zxx==20|Zxx==38 cnfsxx=2 cnfpxx=2
# --- ofp-specfic ---
% ifdef ofp
%   cvar Zxx=32|Zxx==33|Zxx==34|Zxx==50|Zxx==51|Zxx==52 cnfdxx=2
% endif
# --- nfp-specfic ---
% udef -f basxx
% ifdef nfp
%   cchar basxx eltxx=='C' 3,0,2,1.15,-.6,0,1,1.8,-1.5,1,1,1.15,-3
%   cchar basxx eltxx=='N' 2,0,2,.97,-.2,0,1.05,.8,-1,1,1,1.2,-3
%   cchar basxx eltxx=='Si' 2,0,2,.85,-.6,0,1,1.8,-1.5,1,1,1,-3
%   cchar basxx eltxx=='Mn' 3,0,1,2.8,-.1,2,2,1.1,-.2,0,2,1.3,-1,1,1,1.8,-3
% endif
# --- Assign Z,eref,cnf{s,p,d},bas to e.g. {c,a,d} ---
% const Z{eltlxx}=Zxx eref{eltlxx}=erefxx
% const cnfs{eltlxx}=cnfsxx cnfp{eltlxx}=cnfpxx cnfd{eltlxx}=cnfdxx
#% ifndef psta{eltlxx}
#%  char strnxx
#%  cchar strnxx {cnfs{eltlxx}} {strnxx}{cnfs{eltlxx}}, t 0,
#%  cchar strnxx {cnfp{eltlxx}} {strnxx}{cnfp{eltlxx}}, t {strnxx}0,
#%  cchar strnxx {cnfd{eltlxx}} {strnxx}{cnfd{eltlxx}}, t {strnxx}0,
#%  char psta{eltlxx} {strnxx}
#% endif
% ifdef basxx
%  char0 bas{eltlxx} "{basxx}"
% endif
# --- Printout ---
#% char strnxx="P={cnfs{eltlxx}},{cnfp{eltlxx}},{cnfd{eltlxx}}"
#% ifdef bas{eltlxx}
#%   char strnxx="{strnxx} bas={bas{eltlxx}}"
#% endif
#% echo {eltxx}({eltl(ixx,ixx)}): {strnxx}
% end
# --- Cleanup ---
% udef -f tpanxx ofpxx erefxx excfxx eltlxx eltxx basxx strnxx
% udef -f zxx ixx cnfsxx cnfpxx cnfdxx
#% show all

---------------------------------------
Slatsm48K. from slatsm48 by Mark.
---------------------------------------
New installation version. T.Kotani and H.Kino.
This is equivalence with Mark's slatsm48.

However, we changed installation procedure,
because the oririgal package is problematic 
for installation. configure so often fails,
and no clean version up procedures with keeping history.

Features.
1. Not ccomp. Use -cpp.
2. Makefile and Make.inc. You may need to set up Make.inc 
   by your self (for a while). But it should be simple and easier than
   original. Send me back your Make.inc.your_machine.
3. Relative path.
   You can copy ecal/slatsm to anywhere, and do make.
 
------------------------
*What is contained
 Makefile : fixed.
 Make.inc : machine dependent.
            All what you need is to find switches for your systems.
 *.f      : fixed source file for -cpp
 tests:   has drivers to check various routines.

-----
*Installation.
   You have to prepare your own Make.inc at root.



------------------------------------ 
What I did to convert  Mark's slatsm48 to slatsm48K.

1. Make.inc and Makefile are assembled.

2. ccomp --> cpp.
   To do this, 

    dqinvb.for, symvec.for:   ifndef (A|B) ---> if .not. (A|B)

    ran1.for : c#endif ---> C#endif

3. Do convccomp. This calls ccomp2cpp. So all *.for is converted to
   cpp form as *.f



    * minus in name are changed to underscore
    E.g, SUN-ULTRA ---> SUN_ULTRA
    (SUN-ULTRA|POWER-PC|APOLLO-BUG|AUTO-ARRAY|SGI-PARALLEL|AIX-xlf90)


    * C#elseif ---> #elif

    * C#define something ---> #define something 1

    * C#ifdef ---> C#if

    * other C#xxx ---> #xxx

#----------- convccomp ----------------------------
#!/bin/csh
foreach i (`ls *.for`)
echo $i ${i:r}.f
./ccomp2cpp $i > ${i:r}.f
end
#--------------------------------------------------

#----------- ccomp2cpp ----------------------------
#!/usr/bin/python
# Make ccomp style to cpp style
# Apr2007 takao kotani
# Usage:   ccomp2 lm.f
import os
import sys
import string
import re
#n  = len(sys.argv)
#fn = sys.argv[n-1]
fn = sys.argv[1]
oxx = open(fn,'rt').read()
oxx = string.split(oxx,'\n')
tf=0
ckey='^C#(if|ifdef|ifndef|else|elseif|endif)'
for il in oxx:
	iline=il

	if(re.search(ckey+'C',iline)):
		tf=1
		iline= re.sub('^C#','#',iline)
		iline= re.sub('(?P<h1>(def|if|else))C','\g<h1>',iline)
	elif(re.search(ckey,iline)):
		iline= re.sub('^C#','#',iline)
		tf=0

#		print '222axxxxxxxxxxxxx',iline
#		sys.exit()
#	iline= re.sub('^#define','C!!!defined_in_ccomp ',iline)

	iline= re.sub('^#elseif','#elif',iline)
	iline= re.sub('^#ifdef', '#if',iline)

	iline= re.sub('^C#define', '#define',iline)
	iline= re.sub('(?P<i1>(?<=(^#define))\s+\w+)','\g<i1> 1',iline)


        iline= re.sub('SUN-ULTRA', 'SUN_ULTRA',iline)
        iline= re.sub('APOLLO-BUG','APOLLO_BUG',iline)
        iline= re.sub('POWER-PC',  'POWER_PC',iline)
        iline= re.sub('AUTO-ARRAY','AUTO_ARRAY',iline)
        iline= re.sub('SGI-PARALLEL','SGI_PARALLEL',iline)
        iline= re.sub('AIX-xlf90', 'AIX_xlf90',iline)

	if(tf):
		print re.sub('^C','',iline)
	else:
		print iline
	
#------------end of ccomp2cpp ---------------------


CHANGES: 
09.02.12 Hiori Kino
replace: fmain.c and fsubs.c with fmain.f and fsubs.f
changes: syscall.f (I deleted #defines)
use -DHASGETARG -DHASNARGS -DFDATE to compile them.





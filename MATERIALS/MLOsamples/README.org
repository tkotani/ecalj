# -*- Mode: org ; Coding: utf-8-unix -*-
#+TITLE: How to generate |MLO> orbitals (MuffinTin-oibital-based localized orbitals). revised at 2023-8-29
#+AUTHOR: takao kotani @ tottori university, Japan
#+email: takaokotani@gmail.com

Starting from PMT Hamiltonian, we remove APW part in the 1st step, resulting the 
MTP(muffin-tin projected) Hamiltonian at the end of the 1st step.
Then we finally get MLO(muffin-tin based localized oribtals)-based Hamiltonian at the end of the 3rd step. 

* 0th step.
Get converged results in LDA or QSGW.
Then run job_band (syml.si is generated by getsyml si).

* 1st step: Get MTP Hamiltonian from PMT Hamiltonian
Let me explain Si case. Starting from the |PMT> (APW+MTO) basis,
we remove the APW part at first, where we have to keep the eigenvalue dispersion at low energy.

This is performed by 
>ecalj/SRC/exec/job_ham si -np 4
. (core part of job_ham is in lmfham1. Look into the script job_ham.)
Then we have the Hamiltonian (and overlap matrix) for the basis the Muffintin-projected orbitals |MPO>.

At the 1st step, mlo_facw, mlo_eucutw, and mlo_eww are used in GWinput (see lmfham1.f90)
However, we usually not add them to GWinput (default values), as long as we have good results of 1st step.

As a We have bandplot.lmfham1.isp*.glt for gnuplot.
This is for the Hamiltonian of |MTP> (muffin-tin-projected basis). Generated by lmfham1

* 2nd step: Get connecting matrix between k and k+b. lmfham2 --job=0  
Set MLO orbitals in GWinput as
!----------------------------------------------------
<Worb> Site 
  1 Si   1 2 3 4 5 6 7 8 9 
  2 Si   1 2 3 4 5 6 7 8 9
</Worb>
!----------------------------------------------------
This set MTO index as seeds for MLO.
See 'MHAM:' indexes shown at the begining of lmfham (the MTO index of MHAM is with atom index).
Then we run 
>lmfham2 --job=0
for prepare connecting matrix required for the next step.
(Not yet paralellized).

* 3rd step: lmfham2 --job=1
We may have to repeat lmfham2 --job=1 until we get reasonable results.
See examples. And lmfham2.f90, where we see all settings and default values.

** Settings of inner window
To set the inner window, we can use mlo_EUinner or mlo_CUinner mainly as we explain below.
Without following settings, we use defaults values to set EUinner.
This did not work in cases such as Si and SmP.
But defaults worked well for Fe,Cu GdION, NiO and SrTiO3.

*** Semiconductors. mlo_EUinner
For Si, set 
mlo_EUinner 5 
. Here 5 means that we set the upper limit of inner window at 5eV above VBM. 
We use a soft inner window. Thus we do not need to give detailed values (resolution can be ~1eV).

Larger EUinner may destroy continuity of bands and bumpy. (this is a case with default EUinner)

*** 4f case.  mlo_CUinner
For SmP, set 
mlo_CUinner 0.9
This means that we set EUinner at 90 percent point for each 4f MTO components.
When mlo_CUinner 0.5 (this is default), I found EUinner can be a little smaller for SmP.

** Run and Check results
Run
>lmfham2 --job=1
Then plot bandplot.lmfham2.isp*.glt
This superpose not only for the Hamiltonian of |MTP> (muffin-tin-projected basis) at the 2nd step, 
but also the |MLO> (muffin-tin based localized oribtals) Hamiltonian.

NOTE: we use nk in ctrl file for meshing. nk can not be too small for real-space interpolation
(we do not used the interpolation in the usual self-consistency mode of lmf-MPIK).

For tests, we may use maxit 10, however I observed cases
that 10 is too small to make band dispersion too noisy (observe convergence on Nabla2/nMLO.)
Convergence criterion mlo_conv might be a little larger, but not tested.

** Outer window
We do not usually need to set outerwindow.
It is automatically done. Even when you set outerwindow, results may not change so much.


* TODO
** Parallellize lmfham2, speed up
** Calculate effective interaction. Plot picture of MLO. 
** PROBLEMS: (not so serious)
 The space-group symmety is slightly broken in lmfham1, which uses Gram-shmidt diagonalization. (one by one otrhogonalized from bottom).
 The Souza procedure of lmfham2 may enhance the broken symmetry.
 SmP discontinuous SmP at K Why? ==>only four-fold rotation

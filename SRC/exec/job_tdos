#!/usr/bin/env python3
import sys
import os
import subprocess
import gwutil,MachineDependence
from gwutil import mpiRUN 
def run_arg(argin, mpi_size, nfpgw, command, output, *target):
    echo_run = ""  # standard
    serial_run = ""  # standard
    #mpi_run = f"mpirun --bind-to none --map-by node -np {mpi_size}"  # standard
    mpi_run = mpiRUN(mpi_size)
    target_str = ' '.join(target)
    command_str = f"{nfpgw}{command} {target_str}"

    if echo_run:
        print(f"OK! --> Start")
        print(f"{argin} > _IN_")

    with open('_IN_', 'w') as f:
        f.write(argin)

    if mpi_size == '0':
        if echo_run:
            print(f"echo {argin} | {command_str} > {output}")
        result = subprocess.run(f"{command_str} < _IN_ > {output}", shell=True)
    else:
        if echo_run:
            print(f"echo {argin} | {mpi_run} {command_str} > {output}")
        result = subprocess.run(f"{mpi_run} {command_str} < _IN_ > {output}", shell=True)

    if result.returncode != 0:
        if echo_run:
            print(f"Error in {command} input_arg={argin}. See OutputFile={output}")
        sys.exit(10)

    if echo_run:
        print(f"NOTE: Use run_arg defined in {nfpgw}/run_arg")

def main():
    if len(sys.argv) <= 2 or sys.argv[2] != "-np":
        print("An example of usage: job_tdos si -np 4 [options for lmf]")
        print("   For example, [options for lmf] is ' -vnspin=2 -vso=1 -vnk1=10 -vnk2=10 -vnk3=10'")
        sys.exit()
    else:
        MPI_SIZE = sys.argv[3]

    MATERIAL = sys.argv[1]
    n = sys.argv[0]
    nfpgw = os.path.dirname(n)

    # Run the command using run_arg
    run_arg('---', MPI_SIZE, nfpgw, '/lmf', 'llmf_tdos', MATERIAL, '--tdos', *sys.argv[4:])

    # Determine the number of columns in the second line of the dos.tot.$MATERIAL file
    with open(f'dos.tot.{MATERIAL}', 'r') as f:
        lines = f.readlines()
        num = len(lines[1].split())

    ufileg = f'tdos.{MATERIAL}.glt'
    with open(ufileg, 'w') as f:
        f.write('#!/usr/bin/gnuplot -persist\n')
        f.write('set title "Total DOS"\n')
        f.write('set terminal postscript enhanced color eps\n')
        f.write('set output "tdos.eps"\n')
        f.write('set grid\n')
        f.write('set zeroaxis\n')
        f.write('set xran [-20.0:20.0]\n')
        f.write('set xlabel " eV (zero at the Fermi energy or top of valence)"\n')
        f.write('set ylabel " number of states/(cell eV) : red "\n')
        f.write('set y2tics\n')
        f.write('set y2label " number of electrons : green "\n')

        if num == 3:
            print('spin=2')
            f.write('set yrange  [-5:5]\n')
            f.write('set y2range [-50:50]\n')
            f.write(f'plot "dos.tot.{MATERIAL}" u ($1*13.605):($2/13.605) w l lc rgb "red", "" u ($1*13.605):(-$3/13.605) w l lc rgb "red", \\\n')
            f.write(f'     "dosi.tot.{MATERIAL}" u ($1*13.605):2 w l lc rgb "green" axis x1y2, "" u ($1*13.605):(-$3) w l lc rgb "green" axis x1y2\n')
        else:
            print('spin=1')
            f.write('set yrange  [0:5]\n')
            f.write('set y2range [0:50]\n')
            f.write(f'plot "dos.tot.{MATERIAL}" u ($1*13.605):($2/13.605) w l lc rgb "red", "dosi.tot.{MATERIAL}" u ($1*13.605):2 w l lc rgb "green" axis x1y2\n')

        f.write('set terminal x11\n')
        f.write('replot\n')

    if 'NoGnuplot' not in ' '.join(sys.argv[4:]):
        subprocess.run(['gnuplot', ufileg])

    print(f"To repeat, gnuplot -persist {ufileg}")
    print("Change BZ_DOS to change plotting range of DOS.")

if __name__ == "__main__":
    main()

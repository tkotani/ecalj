#!/bin/bash 
# ---------------------------------------------------------
# QP self-consistent GW itteration using MPI. Using run_arg
### you may need to set echo_run and serial_run in /run_arg for cray machine
# ---------------------------------------------------------
if [ $# -ne 4 ] || [ $2 != "-np" ] ; then
    echo "An example of usage: gwsc 5 -np 4 si, where 5 means 5+1 iterations"
    exit 101
fi
n=$0
nfpgw=`dirname $0`
TARGET=$4
MPI_SIZE=$3
NO_MPI=0
ITER=$1
### Read funcitons run_arg and run_arg_tee defined in a file run_arg ###
source $nfpgw/run_arg #define echo_run and serial_run in run_arg
$echo_run echo "### START gwsc: ITER= "$ITER, "MPI size= " $MPI_SIZE, "TARGET= "$TARGET
if [ ! -e SEBK ]; then
    mkdir SEBK
fi
if [ ! -e STDOUT ]; then
    mkdir STDOUT
fi
## mv sigm or simg.$TARGET to sigm. And make softlink to simg.$TARGET.
## sigm is prior to simg.$TARGET.
if [ -e sigm ]; then
    if [ -e sigm.$TARGET ]; then
	mv sigm.$TARGET sigm.$TARGET.bakup 
	ln -s -f sigm sigm.$TARGET 
	$echo_run echo '--- sigm is used. sigm.$TARGET is softlink to it  ---'
    fi
else
    if [ -e sigm.$TARGET ]; then
	mv sigm.$TARGET sigm
	ln -s -f sigm sigm.$TARGET 
	$echo_run echo '--- sigm.$TARGET is moved to sigm. sigm.$TARGET is softlink now.  ---'
    else
	$echo_run echo '--- No sigm nor sigm.$TARGET files for starting ---'
    fi
fi 
##### itteration loop start ##########################################
for ix in `seq 0 ${ITER}`
do  ##### self-consistent calculation for given Sigma(self-energy ###
    $echo_run echo " ---- goto sc calculation for given sigma-vxc --- ix=",$ix
    if [ $ix == 0 ]; then # ix=0 is for iteration from LDA.
	if [ -e sigm.$TARGET ] ; then
	    $echo_run echo " we have sigm already, skip iter=0"
	    continue # goto ix=1
	fi   
	$echo_run echo "No sigm ---> LDA caculation for eigenfunctions "
	rm -f llmf
	run_arg '---' $MPI_SIZE $nfpgw          /lmf-MPIK llmf_lda $TARGET
	cp rst.$TARGET rst.$TARGET.lda
    else
	run_arg '---' $MPI_SIZE $nfpgw          /lmf-MPIK llmf $TARGET
    fi
    rm -f ewindow.${TARGET}* qbyl.${TARGET}* eigze*.${TARGET}* mixm.${TARGET}
    run_arg '---' $NO_MPI  $nfpgw  /lmf-MPIK  llmfgw00 $TARGET --jobgw=0
    run_arg '---' $NO_MPI  $nfpgw  /qg4gw lqg4gw   --job=1 #Generate requied q+G v
    run_arg '---' $MPI_SIZE $nfpgw /lmf-MPIK llmfgw01 $TARGET --jobgw=1
    ##### main stage of gw ################
    run_arg '---' $NO_MPI  $nfpgw /rdata4gw_v2 lrdata4gw_v2 #prepare files
    mv norm* STDOUT
    rm gwa gwb*
    run_arg '---' $NO_MPI $nfpgw   /heftet leftet --job=1 # A file EFERMI for hx0fp0
    ### Core part of the self-energy (exchange only) ###
    run_arg '---' $NO_MPI $nfpgw   /hbasfp0 lbasC --job=3 # Product basis generation 
    run_arg '---' $MPI_SIZE $nfpgw /hvccfp0 lvccC --job=3 # Coulomb matrix for lbasC 
    run_arg '---' $MPI_SIZE $nfpgw /hsfp0_sc lsxC --job=3 # Sigma from core1
    mv stdout* STDOUT
    ### Valence part of the self-energy Sigma ###
    run_arg  '---' $NO_MPI $nfpgw   /hbasfp0 lbas --job=0 # Product basis generation 
    run_arg  '---' $MPI_SIZE $nfpgw /hvccfp0 lvcc --job=0 # Coulomb matrix for lbas 
    run_arg  '---' $MPI_SIZE $nfpgw /hsfp0_sc lsx --job=1 # Exchange Sigma
    mv stdout* STDOUT
    if [ -e WV.d ]; then
	rm -f WV* 
    fi
    # following two runs are most expensive #
    run_arg '---' $MPI_SIZE $nfpgw /hx0init lx0init --job=11 #x0 part
    #run_arg '---' $MPI_SIZE $nfpgw /hx0zmel  lx0zmel    #x0 part
    run_arg '---' $MPI_SIZE $nfpgw /hrcxq    lrcxq       #x0 part
    run_arg '---' $MPI_SIZE $nfpgw /hhilbert lhilbert    #x0 part
    mv stdout* STDOUT
    run_arg '---' $MPI_SIZE $nfpgw /hsfp0_sc lsc --job=2 #correlation Sigma
    mv stdout* STDOUT
    run_arg '---' $NO_MPI $nfpgw   /hqpe_sc lqpe #all Sigma are combined.
    $echo_run echo -n 'OK! --> '
    ### final part of iteration loop. Manupulate files ###
    ln -s -f sigm sigm.$TARGET
    mv SEX* SEC* XC* SEBK
    for file in sigm QPU QPD TOTE.UP TOTE.DN lqpe lsc lsx lx0 llmfgw01 evecfix.chk llmf ESEAVR 
    do
	if [ -e $file ]; then
	    cp $file $file.${ix}run
	fi
    done
    if [ $ix == 0 ] && [ ${ITER} != 0 ]; then
	mkdir RUN0
	run_arg '---' $MPI_SIZE $nfpgw           /lmf-MPIK llmf_oneshot $TARGET
	cp ctrl.$TARGET rst.$TARGET sigm.$TARGET llmf_oneshot save.$TARGET RUN0
    fi
    mkdir RUN.ITER${ix}
    cp ctrl.$TARGET rst.$TARGET sigm.$TARGET GWinput save.$TARGET RUN.ITER${ix}
    $echo_run echo == $ix 'iteration over =='
done 
################## end of loop #######################
### finally we have llmf_gwscend ###
run_arg '---' $MPI_SIZE $nfpgw             /lmf-MPIK llmf_gwscend.${ITER} $TARGET
rm -f ewindow.${TARGET}* qbyl.${TARGET}* eigze*.${TARGET}* _IN_
if [ ${ITER} == 0 ]; then
    mkdir RUN0
    cp ctrl.$TARGET rst.$TARGET sigm.$TARGET llmf_gwscend.${ITER} save.$TARGET RUN0
fi
$echo_run echo OK! ==== All calclation finished for  gwsc $argv ====
exit

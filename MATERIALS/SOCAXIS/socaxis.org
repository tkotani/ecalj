* MAE calculation based on FePt and MnGa. Force theorem Liqin PhysRevB.99.054418,

** implement
I recommend you to see ovarall calling flow  lmfp->bndfp->m_band_cal and m_subze_bzintegration.
sev is the band energy.
At m_bandcal_init, we set up Hamiltonian at m_bandcal.F@L142
          hamm(:,:,1:2)= hamm(:,:,1:2)+hammhso(:,:,1:2) !spin-diag SOC elements (1,1), (2,2) added
          hamm(:,:, 3) = hammhso(:,:,3)                 !spin-offdiagonal SOC elements (1,2) added
SO part is included in hammhso(:,:,isp) where isp=3 is right-upper block of spin matrix.
hammhso is generated at call aughsoc in m_bandcal.
Look into hammhso if necessary 
(T.Kotani implemented only the case 001 and 110, but it should be easy to make it general case).
We set the SOC axis by HAM_SOCAXIS.

** FePt test
MAE test force theorem
creat ctrls.fept by hand
>ctrlgenM1.py fept
Set LMXA=6 
nk 16 16 12
nspin=2 
MMOM=0,0,2.2 for Fe
xcfun=103 !GGA-PBE
so=0
NOTE: digits of atomic position is as accurate as possible (


# Step1. Self-consistent calculation.
$ mpirun -np 4 ~/ecalj/SRC/exec/lmf fept --phispinsym -vso=0 |tee llmf
The end of save file shows
>c so=0 mmom=3.2521968 ehf(eV)=-535698.5395 703 ehk(eV)=-535698.5395 982 sev(eV)=-367.9715004

>c mmom= 3.2641        ehf(eV)=-535698.876212 ehk(eV)=-535698.876238 sev(eV)=-367.65962


# Step2: Extend sigm to sigm_fbz. Skip this step in the case of LDA/GGA cases.
# QSGW: we have to extend sigm file to sigm_fbz (see below)
>lmf fept --phispinsym --wsig_fbz 
(skip bstrux?)


# Step 3. Then you have to modify ctrl file 
 SYMGRP e  (or i*i) 
 NOINV  T  (probably needed?--at least safer setting)
 %const soa1=0 soa2=0 soa3=1 
      SOCAXIS={soa1} {soa2} {soa3}   (!spin axis. this is in HAM category)
Thus we do not use symmetry in this mode.---------------


# Step 4. Band energy for so=0 . Baseline calculation.
$mpirun -np 4 ~/ecalj/SRC/exec/lmf-MPIK fept --phispinsym -vso=0 --quit=band |tee llmfso0
>i so=0 mmom=3.2522553 ehf(eV)=-535698.5395688 ehk(eV)=-535698.5395972 sev(eV)=-367.9707584

(not rewrite rst file. Just perturbation from the last result).
sev is the band energy for the potential in rst file.

This sev is the reference band energy without SO. We add SO term on top of this calculation.


# Step 5. Band energy 001 direction SO=1
mpirun -np 4 ~/ecalj/SRC/exec/lmf-MPIK fept --phispinsym --quit=band -vso=1 -vsoa1=0 -vsoa2=0 -vsoa3=1
>  HAM_SOCAXIS       opt    r8v      3,  3,   *,  3       0 0 1
is shown at the beginig of console output
A line is added to save.fept
>i so=1 soa1=0 soa2=0 soa3=1 mmom=3.2189814 ehf(eV)=-535698.8432677 ehk(eV)=-535698.8338371 sev(eV)=-368.2744573
sev is the band energy for the potential in rst file in addition to the SO term


# Step 6. Band energy 110 direction SO=1
A line is added to save.fept
mpirun -np 4 ~/ecalj/SRC/exec/lmf-MPIK fept --phispinsym --quit=band -vso=1 -vsoa1=1 -vsoa2=1 -vsoa3=0
>i so=1 soa1=1 soa2=1 soa3=0 mmom=3.2216341 ehf(eV)=-535698.8404701 ehk(eV)=-535698.8316219 sev(eV)=-368.2716597

-----------
The difference of sev is -368.2744573+368.2716597= 0.0027976= 2797 micro eV.

(2024-3-6 2750microeV, right?)
============================


** MnGa
Similar procedure shows (old version of save file output in Ry) 
>mpirun -np 4 lmf-MPIK mnga -vso=0 --phispinsym >llmfso0
c so=0 mmom=2.4082439 ehf=-6195.6056894 ehk=-6195.6056905
i so=0 mmom=2.4082689                      ehf=-6195.605 6905 ehk=-6195.6056917 sumev=  -32.994 029 
i so=1 soa1=0 soa2=0 soa3=1 mmom=2.4094348 ehf=-6195.607 1509 ehk=-6195.607152  sumev=  -32.995 490 
i so=1 soa1=1 soa2=1 soa3=0 mmom=2.4091936 ehf=-6195.607 1208 ehk=-6195.607122  sumev=  -32.995 459
Gives 421 micro eV (xcfun=1).



** extend sigm file to sigm_fbz 
Use job_sigm_fbz instead of --wsig_fbz


* script for MAE
#$ -N copt
#$ -pe smp 32
#$ -cwd
#$ -M takaokotani@gmail.com
#$ -m be
#$ -V
#$ -S /bin/bash

export OMP_NUM_THREADS=1
EXEPATH=/home/takao/bin/
mpirun -np 32 $EXEPATH/lmf-MPIK  --phispinsym copt >& llmf1
mpirun -np 32 $EXEPATH/lmf-MPIK  --phispinsym --quit=band copt >& llmf_so00

$EXEPATH/job_sigm_fbz copt -np 32 >&outfbz
cp sigm_fbz.copt sigm.copt

cp ctrl.copt.e ctrl.copt
mpirun -np 32 $EXEPATH/lmf-MPIK --phispinsym -vso=0 --quit=band copt  >& llmf_so0

cp ctrl.copt.so ctrl.copt
mpirun -np 32 $EXEPATH/lmf-MPIK --phispinsym --quit=band -vso=1 -vsoa1=0 -vsoa2=0 -vsoa3=1 copt >& llmf_so001
mpirun -np 32 $EXEPATH/lmf-MPIK --phispinsym --quit=band -vso=1 -vsoa1=1 -vsoa2=1 -vsoa3=0 copt >& llmf_so110

** GWinput setting for metal
HistBin_dw    1d-5 ! 1d-5 is fine mesh (good for metal?) !(a.u.) BinWidth along real axis at omega=0.
HistBin_ratio 1.03 ! 1.03 maybe safer. frhis(iw)= b*(exp(a*(iw-1))-1), where a=ratio-1.0 and dw=b*a
GaussianFilterX0 0.01 


*** old memo Q&A with yongbin
*****  --- from yongbin,----
# I'm trying to ge MAE with QSGW. For this purpose I did
# I ran "gwsc 20  -np 32 nife" with so=0 in ctrl.feni.
# After the calculation was done,  I created a new directory "SO".
# I copied, ctrl.feni, rst.feni and sigm.feni files into the new directory.
# I edited ctrl.feni file as your examples.
#  I ran  "mpirun -np 4 lmf-MPIK feni --phispinsym -vso=0 --quit=band | tee llmfso0"
# With this procedure, I got an error,
# 
# " q-points in full BZ where sigma calculable ...
#  BZMESH:    384 irreducible QP from    8   8   6 shift= F F F
#  Irr. qp for which sigma is calculated ...
#  BZMESH:    384 irreducible QP from    8   8   6 shift= F F F
# Exit / rdsigm unexpected value 60 for file sigm nqp ... expected 384
#  CPU time:    3.883s     Sun Sep 26 20:45:16 2021   on
# ERROR: fexit, error code=   -1 "
***** my reply to Yongbin, 
This is because you set
>SYMGRP e
Then we do not assume space-group symmetry of crystal.
It requires 8x8x6=384 k points while we only have 60 irreducible k points
when we use SYMGRP find.

So, if you use SYMGRP e, we need to extend sigm.feni to full BZ.
For this purpose, I recovered a part of my code.
In the commit c0f49747 (SOCAXIS) in bitbucket.
I modified just attached rdsigm2.F (it is better to take the commit
from bitbucket but this file may(or may not) easier for you).

Usage
1. After the end original QSGW calculation, run
  lmf-MPIK feni --wsig_fbz (single core is fine),
  Then it stops after sigm_fbz.feni is generated.
   The size of sigm_fbz is  384/60 times larger than sigm file.
2. copy sigm_fbz.feni to sigm.feni, and set SYMGRP e
  in ctrl file. Then lmf-MPIK read sigm.feni normally.

I did minimum test for the new commit.
Let me know if you have another trouble.





** Need good convergence 
We use --phispinsym (the same orbital for up and dn) for lmf-MPIK.
We need good convergence (at least for lmf-MPIK with --phispinsym).
gwsc_sym0 can perform this automatically.
Good congergence of lmf-MPIK should assure numerically accurate space-group symmetry
of rst file, as well as sigm file.


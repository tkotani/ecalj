#!/bin/csh -f
# This is a batch submission program 
# This use 
set  nnn = $#argv 
echo $nnn $argv
if( $nnn == 0 ) then
goto pql
endif

if( $argv[1] == "--help" ) then
goto help
endif

#echo xxxxxxxxxxxxxxxx pqstart xxxxxxxx

set pqdir = $HOME/pqlist$argv[1]
#############################################

if(-e $pqdir/saveid) then
  set count = `cat $pqdir/saveid`
else 
  set count = 000000
endif
@ count = $count + 1
cat > $pqdir/saveid <<EOF
$count
EOF
#echo 'saveid =' $count 
#echo $%count

set len = `wc -c $pqdir/saveid| cut -f 1 -d'/'`  
#echo len =  $len
if     ( $len <3 ) then 
  set count = 00000$count
else if( $len <4 ) then 
  set count =  0000$count
else if( $len <5 ) then 
  set count =   000$count
else if( $len <6 ) then 
  set count =    00$count
else if( $len <7 ) then 
  set count =     0$count
endif
set batchname = {$count}_000

cat <<EOF > $pqdir/$batchname.batch
cd $PWD; $argv[2] 
EOF
echo 'JOB: '`cat $pqdir/$batchname.batch`' @ '$pqdir/$batchname.batch  

cat <<EOF >> $PWD/pq_submitted
'JOB: '`cat $pqdir/$batchname.batch`' @ '$pqdir/$batchname.batch  
EOF
exit

pql:
foreach xx (1)# 2 3 4 5 6 7 8 9 10 11 12 13 14 15)
 echo ' '
 ls -rlt ~/pqlist{$xx}/FINISHED/*.batch.log |tail -3
 foreach batch  (`ls -1 ~/pqlist{$xx}/*.batch`)
 set id = x.NotYet
 if (-e $batch.running) set id = `ls -1 $batch.running.*` 
 echo ' pqlist'$xx :  {$batch:t}:  `cat -v $batch`  : run = $id:e
 end
end
exit

help:
echo " "
echo " =========== Personal Queing system pq and pqd(deamon)================"
echo "Usage: pq [cpuid] [job]"
echo " [cpuid] 1,2,3.. "
echo "         See pqd.  Each [cpuid] corresponds to ~/pqlist[cpuid]"
echo ' [job]  the same as what you do as in te usual console job, but use " ... " '
echo " "
echo " --- An example is --- "
echo '   pq 4 "tot_lattice_ecutA k 10.0".'
echo " This means you put job schedule into ~/pqlist4, which corresponds to cpu4."
echo " standard output are into ~/pqlist4/*.log "
echo '   pq 7 "gwsc si >& out_si".'
echo " Working directory is the current directory which you did pq"
echo " See pqd, which should be runnnig in order to process jobs each by each."
echo " "
echo " ---- Related command ---"
echo "pq without arguments shows what jobs are on cpu."
echo " "
echo "pqr " 
echo "   only shows jobs now runnning."
echo " "
echo "pqk [ciuid] [PID]  "
echo "   can kill the job. [PID] is what is shown with pq."
echo " "
echo "pqf" 
echo "  shows jobs which had done already."
echo " "
echo "pqd [cpuid]"
echo "  If you want to process jobs,  this deamon shold be invoked in each cpu."
echo " "
echo "      pq use ~/pqlist[i] directory as a job stocker for each [i] cpu."








#!/usr/bin/env python3
from gwutil import *
import os, datetime, shutil, glob,sys, argparse, re

parser = argparse.ArgumentParser(prog='gwsc',description='''
  QSGW calculation with MPI.
  gwsc allow general options (not described here), which are used in cmdopt in *.f90'
''')
parser.add_argument("nloop",       help='number of QSGW iteration, starting from current result.',default=1,type=int)
parser.add_argument("extension",   help='extension of ctrl')
parser.add_argument("-np",        help='number of mpi cores in lmf',default=4,type=int)
parser.add_argument("-np2",       help='number of mpi cores in lxc etc') 
parser.add_argument('--phispinsym',help='spin-symmetrized augmentation',action='store_true')
parser.add_argument('--emptyrun'  ,help='test for gprof for memory',    action='store_true')
parser.add_argument('--gpu' ,help='USE GPU version for hsfp0 and hrcxq',    action='store_true')
parser.add_argument('--mp'  ,help='USE mixed precision version for hsfp0 and hrcxq',    action='store_true')
args,unknown=parser.parse_known_args()

target=''.join(re.split('ctrl.',args.extension))
nloop=args.nloop
ncore=args.np
ncore2=args.np
epath=os.path.dirname(os.path.abspath(__file__))
if args.np2!=None:
   ncore2=int(args.np2)
#else:
# options
#option=' --keepwv '
option=' '
exec_type=''
# existing
if args.phispinsym==True: option= option+ ' --phispinsym '
if args.emptyrun  ==True: option= option+ ' --emptyrun '
if args.mp        ==True: exec_type='_mp'
if args.gpu       ==True:
    exec_type=exec_type+'_gpu'
    option = option + ' --keepwv '
option = ' '+option+' '.join(unknown)+' '
datei=run_program('echo --- Start gwsc ---',1)
print('option=',option)
try:
    tmp=[int(s.strip('QPU.').strip('run')) for s in os.listdir() if 'QPU.' in s]
    Iter0=max(tmp) if len(tmp)!=0 else 0
except:
    Iter0=0
if(nloop==0):
    nloop=1
    print('WARN: We replace ITERADD=0 with ITERADD=1 because of backward compatibility.')
initxt="### START gwsc: ITERADD= %d, MPI size=  %d, %d TARGET= %s"%(nloop,ncore,ncore2,target)
print(initxt,flush=True)
gen_dir('SEBK')
gen_dir('STDOUT')
sigm_name='sigm.%s'%target
rst_name ='rst.%s'%target

#  sigm_name is a softlink. sigm contains static self-energy - Vxc
if (not os.path.islink(sigm_name)) and os.path.isfile(sigm_name):
    shutil.move(sigm_name,'sigm')
if not os.path.islink(sigm_name):
    os.symlink('sigm',sigm_name) # sigm_name is a softlike to sigm
targetss=' '+target+' '+option+' '
flist=['ctrl.%s'%target,rst_name,sigm_name,'save.%s'%target,'log.%s'%target,'QPU','QPD','GWinput','lsxC','lsx','lsc','ECORE']

#initial band structre
print('===== Ititial band structure ====== ',flush=True)
if os.path.isfile(sigm_name):
    print("---> We use existing sigm file",flush=True)
    run_program(epath+'/lmf'+targetss+'>llmf_start',ncore,datei)
else:
    print("---> No sigm. LDA caculation for eigenfunctions ",flush=True)
    run_program(epath+'/lmfa'+targetss+'>llmfa',1,datei)
    run_program(epath+'/lmf '+targetss+'>llmf_lda',ncore,datei)
    shutil.copy(rst_name,rst_name+'.lda')
    rundir='LDA'
    gen_dir(rundir)
    cp_files(flist,rundir)
    cp_files(glob.glob('atmpnu*'),rundir)
    rm_files(glob.glob('__mixm*%s*'%target))
    rm_files(glob.glob('mixm*%s*'%target))

# main iteration ###################################
if(Iter0!=0): print(f'We found QPU.{Iter0} -->start to generate QPU.{Iter0+1}...')
for i in range(1,nloop+1): #nloop is the additional number of iteration
    niter=i+Iter0
    print(f'===== QSGW iteration start iter {niter} ===',flush=True)
    #gw initialize
    run_program(epath+'/lmf'+targetss+'--jobgw=0 >llmfgw00',1,datei)
    run_program(epath+'/qg4gw '+option+'--job=1 > lqg4gw',1,datei)
    run_program(epath+'/lmf'+targetss+'--jobgw=1 >llmfgw01',ncore,datei)
    ##### main stage of gw ####
    run_program(epath+'/heftet --job=1 '+option+'> leftet',1,datei)       # A file EFERMI for hx0fp0
    ### Core part of the self-energy (exchange only) ###
    run_program(epath+'/hbasfp0 --job=3 '+option+'>lbasC',1,datei)          # Product basis generation
    run_program(epath+'/hvccfp0'+exec_type+' --job=3 '+option+'> lvccC', ncore,datei) # Coulomb matrix for lbasC
    run_program(epath+'/hsfp0_sc'+exec_type+' --job=3 '+option+'>lsxC',ncore2,datei) # Sigma from core1
    mv_files(glob.glob('stdout*'),'STDOUT')
    ### Valence part of the self-energy Sigma ###
    run_program(epath+'/hbasfp0 --job=0 '+option+'> lbas',1,datei)        # Product basis generation
    run_program(epath+'/hvccfp0'+exec_type+' --job=0 '+option+'> lvcc',ncore,datei) # Coulomb matrix for lbas
    run_program(epath+'/hsfp0_sc'+exec_type+' --job=1 '+option+'>lsx',ncore2,datei) # Exchange Sigma
    mv_files(glob.glob('stdout*'),'STDOUT')
    run_program(epath+'/hrcxq'+exec_type+option+'> lrcxq',ncore2,datei)       #x0 part
    mv_files(glob.glob('stdout*'),'STDOUT')
    run_program(epath+'/hsfp0_sc'+exec_type+' --job=2 '+option+'> lsc',ncore2,datei) #correlation Sigma
    mv_files(glob.glob('stdout*'),'STDOUT')
    run_program(epath+'/hqpe_sc '+option+'> lqpe',1,datei)        #all Sigma are combined.
    #
    run_program(epath+'/lmf'+targetss+'>llmf',ncore,datei)
    # final part of iteration loop. Manupulate files
    mv_files(glob.glob('SEX*')+glob.glob('SEC*')+glob.glob('XC*'),'SEBK')
    for f in ['QPU','QPD','llmf','atmpnu*']:
        if os.path.isfile(f): shutil.copy(f,f+'.%drun'%niter)
    rundir='QSGW.%drun'%niter
    gen_dir(rundir)
    cp_files(flist,rundir)
    cp_files(glob.glob('dos*')+glob.glob('atmpnu*'),rundir)
    #shutil.move('STDOUT','STDOUT.%drun'%niter)
    #gen_dir('STDOUT')
    print(f'===== QSGW iteration end   iter {niter} ===',flush=True)
print('OK! ==== All calclation finished for  gwsc ====')

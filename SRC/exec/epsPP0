#!/usr/bin/env python3
# -*- coding:utf-8 -*-
def gen_dir(dirname):
    if not os.path.isdir(dirname):
        os.mkdir(dirname)
def cp_files(files,cp_dir):
    for fname in files:
        if os.path.isfile(fname):
            shutil.copy(fname,cp_dir+'/'+fname)
def mv_files(files,mv_dir):
    for fname in files:
        shutil.move(fname,mv_dir+'/'+fname)
def remove(fname):
    if os.path.isfile(fname):
        os.remove(fname)
def rm_files(files):
    for fname in files:
        remove(fname)
def run_program(commandline, ncore=0,x0=0):
    import subprocess,datetime
    xdate=datetime.datetime.now() #today().isoformat()
    mpirun='mpirun -np %d '%ncore if ncore!=0 else ''
    run_command = mpirun + commandline
    if(x0==0):
        print(xdate,'  '+run_command,flush=True)
    else:
        print(xdate-x0,'  '+run_command,flush=True)
    info=subprocess.run(run_command,shell=True)
    if info.returncode!=0: #if return error
        print('Error in '+run_command,flush=True)
        exit(-1)
    return xdate

'''
epsPP0 (epsinter and epsintra )
'''
import os, datetime, shutil, glob,sys
#from gwutil import *
#target,ncore,option=gw_args('epsPP0',note='Calculate epsinter,epsintra,epsall')
import argparse
pname='epsPP0'
note='Calculate epsinter,epsintra,epsall'
parser=argparse.ArgumentParser(prog=pname,description=note)
parser.add_argument("-np",     help='number of mpi cores in lmf',action='store')
parser.add_argument("material_name",help=':name of extension')
parser.add_argument('--phispinsym',action='store_true',help='spin-symmetrized augmentation')
parser.add_argument('--afsym',action='store_true',help='AF symmetry mode')
args=parser.parse_args()
#print(args)
target=args.material_name
ncore=int(args.np)
option=''
if args.phispinsym==True: option=' --phispinsym'

epath=os.path.dirname(os.path.abspath(__file__))
initxt="### START epsPP0 MPI size=  %d TARGET= %s"%(ncore,target)
print(initxt,flush=True)
######## THIS iS for no lfc mode.
targets=' '+target + option+' '
run_program(epath+'/lmf'+targets+'--jobgw=0 --novxc >llmfgw00') #generate information files
run_program(epath+'/qg4gw --job=2 > lqg4gw02')
run_program(epath+'/lmf'+targets+'--novxc --jobgw=1 --skipbstruxinit >llmfgw01',ncore) #generate eigenfunctions for GW.
run_program(epath+'/heftet --job=1 > leftet')       # A file EFERMI for hx0fp0
run_program(epath+'/hbasfp0 --job=4 >lbas')         # Product basis generation
run_program(epath+'/hvccfp0 --job=202 > lvcc',ncore) # Coulomb matrix for lbas
run_program(epath+'/hx0fp0 --zmel0 --job=202 --interbandonly > lx0_interband',ncore) #EPS for intraband
run_program(epath+'/hx0fp0 --job=202 --intrabandonly > lx0_intraband',ncore) #EPS for intraband
run_program(epath+'/readeps.py > lreadeps')
print('OK! ==== All calclation finished for epsPP0. Plot epsinter.dat ====')
print('  We generated epsinter,epsintra,epsall.*. See *.glt files')
print('  Files epsinter.dat and epsintra.dat contain multiple eps data sets to confirm setting. gnuplot eps*.glt show these sets superposed.')
print('  WARN: If the superposition check is not good, let t.kotani fix the problem.')

# -*- Mode: org ; Coding: utf-8-unix -*-
#+TITLE: ecalj: MTO-based effective Hamiltonian Project.
#+AUTHOR: takao kotani @ tottori university, Japan
#+email: takaokotani@gmail.com

This file is written in org-mode in emacs.

Here we show how to get MTO-only Hamiltonian after you get convergence in the PMT=MTO+APW method.
Examples are in Si_HamMTO, Fe_HamMTO. Follow instructions below at first.


** CAUTION
+ iprint=0 except master in bndfp.F 
  To supress output except master, I have a line in bndfp.F as
: ipr=iprint() !When procid/=master, iprint=0
 . So, what is done in other nodes are not shown.


+ We now use pwmode=1 (but =11 should work as well). 

+ Spin symmetric MTOs with --phispinsym.
This is implmented in 
: commit c81819cc16fd34d4bb352ba2eb9dc3e1d354aa56
Its log says 

#+BEGIN_EXAMPLE
Author: Takao Kotani <takaokotani@gmail.com>
Date:   Tue Aug 27 12:36:50 2019 +0900
   
    With --phispinsym option for lmf,lmf-MPIK, we can use spin-averages pnu and V0.
    You can use job_ham_phispinsym instead of job_ham.
    
    From V0 and pnu, we calculate radial funcitons phi and phidot.
       pnu corresponding to energies of radial schrodinger eq.
       V0 is the spherical potential, ssite(ib)%rv_a_ov0.
    
    
    Search --phispinsym in the console output. It shows
    ----
     bndfp: --phispinsym use spin-averaged potential for phi and phidot
      ibas l=  1  0 pnu=   4.58531   4.57791 -->   4.58161
      ibas l=  1  1 pnu=   4.40324   4.38211 -->   4.39268
    .... (this is symmetrization of pnu) at the begining of bndfp
    ----
     locpot: --phispinsym mode: use spin-averaged potential for phi and phidot
      ibas l=  1  0 pnu(1:nsp) pnz(1:nsp)=   4.58161   4.58161   0.00000   0.00000
      ibas l=  1  1 pnu(1:nsp) pnz(1:nsp)=   4.39268   4.39268   3.94432   3.94432
    ... (this shows pnu used in locpot).
    
    What we can do are
    
    1. self-consistent calculations can be performed with --phispinsym
    
    2. Even if the self-consistency is spin-dependent phi,phidot,
       job_ham_phispinsym (see --phispinsym option) gives Hamiltonian, based on the spin-symmetric radial functions.
       Then the radial functions are calculated from the spin-averaged V0 and pnu.
    ---
    I think we can perfrom QSGW calculation if we use the option for lmf,lmfgw
       (not tested yet). We may need to insert --phispinsym in gwsc script (not yet).
    I think we can give Hamiltonian based on the spin-averaged phi,phidot
       even in QSGW self-consistent results without --phispinsym.
    
    =====================================================================
    MEMO for development:
     =====================================================================
    At first, note that we have lmf subroutines;
    --------
    fp/bndfp.F (main one-iteration loop of band calculation)
      -mkpot (potential generation)
      --locpot (MT parts)
      ---augmat (augmentation matrix: MT-part of Hamiltonian and overlap matrix).
    Note mkpot is called even in bndfp-sugw-mkpot
    
    locpot: gives ov0. ov0 is symmetrized.
    pnunew: renew pnu---so pnu should symmetrized.
    bndfp:  pnu is symmetrized at the begining befor mkpot-locpot
#+END_EXAMPLE



** step1: Get rst (and/or sigm).
From ctrl.si (or others like ctrl.fe), you do self-consistent calculations.
Check pwmode=1 as 
% const pwmode=1
      PWMODE={pwmode} 
in ctrl file

#+begin_src bash
lmfa fe
lmf fe
#+end_src
It can be LDA or QSGW, final results are in
rst.fe (sigm.fe in QSGW in addition to this).


** step2: Band plot with APW+MTO
  Make band plot. We need syml.fe or syml.si
  (you can get it by >getsylm fe; getsyml need to be soft linked to ecalj/GetSyml/getsyml.py).
: job_band fe -np 24, or si

  In llmf_band, you can find following lines  at
:     bndfp: kpt     2 of    97 k=  0.0000 -0.0500  0.0000 ndimh = nmto+napw =    41   28   13
  This means 28 MTOs and 13 APWs used.
  Try
:  >grep bndfp nmto fe
  Note job_band does not change rst file.

Keep your band plot. For example,
: >mkdir PWMODE1
: >cd PWMODE1
: >cp bandplot* PWMODE1
: >cp bnd* PWMODE1
You can replot bands by 
: >cd PWMODE1
: >gnuplot -p bandplot.isp1.glt

Current version of band mode generates qplist.dat which contains q point llist for band plot.

NOTE: Eigenvalues are written as (in Ry)
: bndfp: kpt    1 of   97 k jsp=  0.00000  0.00000  0.00000 2 nev=   34
: -3.7314 -3.7314 -3.7314 -0.5675 -0.0092 -0.0091 -0.0091  0.1240  0.1240
:  1.7952  1.7952  1.7952  2.4145  2.4145  2.4311  2.4311  2.4312  3.1464
:  3.1465  3.1465  3.7662  4.7800  4.7801  4.7801  6.2200  6.2204  6.3346
:  6.4887  7.3912  7.3913  7.3914  8.3638  8.3642  8.3648



** step3: Band Plot with MTO only
: > job_band si -np 4 -vpwmode=0
   
  Check 'calculations without APW' are good enough or not. (superpose bands in the step2 and step3.)
  (energy bands are plotted by the gnuplot script bandplot.isp*.glt)
  
  In the case of Si, a little differnce between PMT=APW+MTO and MTO-only.
  Without APWs, we have Band gap is too large by \sim 0.2eV in the case of pwmode=0.
  (one reason is that we use very localize MTOs in the default setting. or no empty spheres)

Keep your band plot. For example,
: >mkdir PWMODE0
: >cd PWMODE0
: >cp bandplot* PWMODE0
: >cp bnd* PWMODE01
You can replot bands by 
: >cd PWMODE0
: >gnuplot -p bandplot.isp1.glt

You can compare two band plot with -vpmode=1 and -vpmode=0 by a gnuplot command as follows.
gnuplot commands can be
#+BEGIN_EXAMPLE
plot \
"PWMODE0/bnd001.spin1" u ($2):($3) lt 1 pt 1 w lp,\
"PWMODE0/bnd002.spin1" u ($2):($3) lt 1 pt 1 w lp,\
"PWMODE0/bnd003.spin1" u ($2):($3) lt 1 pt 1 w lp,\
"PWMODE0/bnd004.spin1" u ($2):($3) lt 1 pt 1 w lp,\
"PWMODE0/bnd005.spin1" u ($2):($3) lt 1 pt 1 w lp,\
"PWMODE0/bnd006.spin1" u ($2):($3) lt 1 pt 1 w lp,\
"PWMODE1/bnd001.spin1" u ($2):($3) lt 2 pt 2 w lp,\
"PWMODE1/bnd002.spin1" u ($2):($3) lt 2 pt 2 w lp,\
"PWMODE1/bnd003.spin1" u ($2):($3) lt 2 pt 2 w lp,\
"PWMODE1/bnd004.spin1" u ($2):($3) lt 2 pt 2 w lp,\
"PWMODE1/bnd005.spin1" u ($2):($3) lt 2 pt 2 w lp,\
"PWMODE1/bnd006.spin1" u ($2):($3) lt 2 pt 2 w lp
pause -1
#+END_EXAMPLE
(you can see the difference in ecalj/MATERIALS/Si_HamMTO/SiPWMODE11vs0.png)


At this point, you can check discrapancy between PMT=MTO+APW and MTO-block only diagonalization.


** step4: Generate PMT Hamiltonian for all mesh points. 
:   >job_ham si -np 24 -np 4
   See job_ham script.
   HamiltonianPMT contains Hamiltonian and ovarlap matrix in the 1st BZ.
   In the job_ham script, we use full mesh option --fullmesh, which means we calculate 
   Hamiltonian of all mesh points, e.g. 64 k point for 4x4x4. IF -np 4, only eigenvalues 64/4=16 k 
   points are shown in the console output( In bndfp.F, we plot only the output of master core).

Be careful. At the begining of job_ham, we calculate the fermi energy by
>mpirun -np $3 ~/ecalj/lm7K/lmf-MPIK $1 --quit=band > lmf_efermi
This generate fermi energy file efermi.lmf.
This is for default pwmode if you don't specify -vpwmode=1.


** step 5: Run lmfham1 and Read lm7K/lmfham1.F
lmfham1 read =HamltonianPMT= and =HamiltonianPMTinfo=.
Here HamiltonianPMT contains the Hamiltonian and overlap matrix for MTO+APW.
Look into ecalj/lm7K/lmfham1.F

You can run lmfham1 only from files
:  HamiltonianPMT     (hamiltonian and overlap matrix)
:  HamiltonianPMTinfo (info lf lattice and  index 
:  qplits.dat         (qpoint for which we plot bands).
(For example, you put only these files in a directory and run lmfham1)
Run 
: >lmfham1
lmfham1 generetes HamiltonianMTO and overlap matrix, and diagonalize it.
You have to read ecalj/lm7K/lmfham1.F

This generates "band_lmfham_spin1.dat" (and band_lmfham_spin2.dat for isp=2).
To plot them, use gnuplot scipt such as
#+begin_src
ef=0.2239816400'                                     
plot \'                                              
"bnd001.spin1" u ($2):($3) lt 1 pt 1 w lp,\'         
"bnd002.spin1" u ($2):($3) lt 1 pt 1 w lp,\'         
"bnd003.spin1" u ($2):($3) lt 1 pt 1 w lp,\'         
"bnd004.spin1" u ($2):($3) lt 1 pt 1 w lp,\'         
"bnd005.spin1" u ($2):($3) lt 1 pt 1 w lp,\'         
"bnd006.spin1" u ($2):($3) lt 1 pt 1 w lp,\'         
"band_lmfham_spin1.dat" u ($1):(13.605*($2-ef)) pt 2'
#+end_src
Here we need to set Fermi energy =ef=. See L1:qplist.dat to take the Fermi energy for temporay use.
L1:qpllist.dat is the fermi energy (top of valence) from your last run of job_band).
(this is shown at the end of console output of lmfham1 for convenience).

In future, fermi energy should be determined within lmfham1.

+ The PMT index is shown in the console output of lmfham1.F
  Do
  >lmfham1 |grep MHAM
  It shows the Hamiltonian index corresponds to which PMTs.

---
In lmfham1.F, we read HamiltonianPMT and HamitonianPMTinfo by call ReadHamPMTinfo(),
Then we generate real-space Hamiltonian and Ovelap for MTO only by call HamPMTtoHamRsMTO, which
results in a file HamRsMTO.
This is readin by call ReadHamRsMTO(). 
NOTE: for separation in future, we write and read HamRsMTO in lmfham1.

Then, mainly in the main routine in lmfham1.F, we generate hamm, for k along the k points on symmetry line.
See the current version of lmfham1.F is with symlcase=.true (you may modify this to any k points).
And then diagonalize it by "call zhev_tk2" 
(the subroutine's main inputs are hamm and ovlm, epsovl is for removing basis with poor linear dependency).
 
The index of PMT basis is included in HamiltonianPMTInfo. 
See m_readhamiltonianPMT in lmfham1.F.
   + ldim: Hamiltonian dimension
   + ib_table: site index (site ordering is shown by lmchk).
   + l_tabale: l table. m takes -l to l ordering. See ends of jobpdos (showing real space harmonics).
   + k_table: k takes 1(EH),2(EH2), or 3(LO).
Ask to takaokotani@gmail.com 


** Plan for development. -------------
We have to modify HamPMTtoHamRsMTO().
which is including the energy correction.
That is, 
------------------------------------
From Hij(k)^PMT and Oij(k)^PMT,
we have to generates Hij(k)^MTO and Oij(k)^MTO.
(we don't need to touch conversion part from k to real). 
In the current vertion, we simply take the MTO block of PMT Hamiltonians.
In the next vertion,
  Hij(k)^PMT --> Hij(k)^MTO
should be corrected.
------------------------------------


#!/bin/csh -x
# ---------------------------------------------
# GW run --- test for pararell computing.
#  You have to prepare the LDA result by lmf with
#  GWIN and QPNT files.
# ---------------------------------------------

######################################
# - Prepare countmax Number of machines (or parallelling number) ----
# Set values you want.
@ nmachine   = 3
####################################
echo ' ### paralellization test nmachine =' $nmachine 
set n=$0
echo $n
set nfpgw = ${n:h}
echo $nfpgw
echo $argv[1]
rm -f NoCore QPU*


#############################################
#goto test2
#############################################


#setenv LMJOB $argv[1]
#echo 0 | $nfpgw/ng0  >lng00
#$nfpgw/qg4gw >lqg4gw
#echo 1 | $nfpgw/ng0  >lng01
#echo 2 | $nfpgw/ng0  >lng02
############## preparatry GW stage ################
#$nfpgw/lmfgw  $argv[1]        >llmfgw
#echo $argv[1]|$nfpgw/lmf2gw   >llmf2gw


############## preparatoy gw stage ################
echo 0 |$nfpgw/lmfgw  $argv[1] > llmfgw00
echo 1 |$nfpgw/qg4gw           > lqg4gw
echo 1 |$nfpgw/lmfgw  $argv[1] > llmfgw01
@ exinfo = `tail -3 llmfgw01 | head -1|awk '{print $2}'`
if($exinfo == 0 ) then
  echo " OK! lmfgw mode=1 "
else
  echo `tail -3 llmfgw01 `
endif
echo $argv[1]|$nfpgw/lmf2gw    > llmf2gw


############## Main gw stage ################
echo 0|$nfpgw/rdata4gw_v2      >lrdata4gw

# --- get EFERMI for hx0fp0
echo 1|$nfpgw/heftet      >leftet

# --- hchknw only calculate NW, which contains the number of nw corresponding to QPNT -----
echo 0|$nfpgw/hchknw         >lchknw

echo " ##### QPNT is splitted into QPNT.{number} files and make X0DIV ##### "
rm -f X0KDIV
rm -f QPNT.[0-9]*
echo $nmachine | $nfpgw/hparainfo   > lparainfo

set  kinitlist = (` head -2 X0KDIV|tail -1 `)
set  kendlist  = (` head -3 X0KDIV|tail -1 `)
echo $kinitlist
echo $kendlist


test5:
echo "##### Core exchange self-energy pararell-computing. ######"
echo 3|$nfpgw/hbasfp0  >lbasC
echo 0|$nfpgw/hvccfp0  >lvccC

rm -f SEXcore[UD]*
################ PARALLEL1 ###############################
@ count = 1
while(-e QPNT.$count)
  echo  ' '
  echo ' --- ' $count 'th loop starting with ' QPNT.$count
  echo "3 $count"|$nfpgw/hsfp0   >lsxC.$count
  @ count = $count + 1
end
################ End of PARALLEL1 #######################

echo "##### Valence part bas #####"
echo 0|$nfpgw/hbasfp0 >lbas

test1:
rm -f VCCFP.*
rm -f VCCFPLIST
rm -f WVR.*
rm -f WVRLIST
rm -f WVI.*
rm -f WVILIST
rm -f Mix0vec.*


test2:
echo "##### Dielectric constant and W-V --- Parallel computing ------######"
set  nmachine = ` head -1 X0KDIV` 
echo ' nmachine = ' $nmachine
################ PARALLEL2 ###############################
@ count = 1
while( $count <= $nmachine )
  @ kinit = $kinitlist[$count]
  @ kend =  $kendlist[$count]
  echo ' ---  ' $count ' th cycle.  From ' $kinit ' to ' $kend 
  echo "0  $kinit $kend" |$nfpgw/hvccfp0  > lvcc.$count	
# -- Sergey.F the screened coulom interaction 
  echo "11  $kinit $kend" |$nfpgw/hx0fp0   > lx0_sf.$count
  @ count = $count + 1
end
################ End of PARALLEL2 #######################


echo ' '
echo "##### Merge WV* to WV. Generate total Vcoul."
rm -f WVRLIST
rm -f WVILIST
@ count = 1
while( $count <= $nmachine )
 @ kinit = $kinitlist[$count]
 @ kend =  $kendlist[$count]
 echo WVR.$kinit'to'$kend '   ' $kinit '   ' $kend >> WVRLIST
 echo WVI.$kinit'to'$kend '   ' $kinit '   ' $kend >> WVILIST
 @ count = $count + 1
end
cp WV.d.$kinit'to'$kend WV.d

echo ' '
cat WVRLIST
echo ' '
cat WVILIST
echo ' '
$nfpgw/hmergewv >lmergwv
echo "We remake the coulomb matrix because it is not time-consuming."
rm -f PARALELL.X0
echo 0|$nfpgw/hvccfp0   >lvcc	

test3:
echo "##### Valence self-energy PARALLEL-computing ###"
# Asuume nmachine number of QPNT.$count file.
################ PARALLEL3 ###############################
@ count = 1
while( -e QPNT.$count)
  echo ' --- ' $count 'th loop starting with ' QPNT.$count
# -- Sergey.F the exchange self energy from valence core2+valence elctrons 
  echo "11 $count"|$nfpgw/hsfp0 >lsx_sf.$count
# -- Sergey. F the correlation self-energy from valence core2+valence elctrons 
  echo "12 $count"|$nfpgw/hsfp0 >lsc_sf.$count
  @ count = $count + 1
end
################ End of PARALLEL3 #######################

test4:
echo '### Merge all XCU and so on ...'
rm -f SEXcore[UD]
rm -f SEX[UD]
rm -f SEC[UD]
rm -f  XC[UD]

foreach head ( XCU SEXU SEXcoreU SECU XCD SEXD SECD SEXcoreD )
  @ ktot  = 0
  @ datatot = 0
  @ count = 1
  while(-e QPNT.$count )
    if( -e $head.$count ) then
      grep 'nspin  nq  ntq' $head.$count > xxxdummy
      @ nspin   = `awk '{print $1}' xxxdummy` 
      @ knum    = `awk '{print $2}' xxxdummy` 
      @ ntq     = `awk '{print $3}' xxxdummy`
      rm -f xxxdummy 

      @ datanum = $knum  * $ntq
      @ ktot    = $ktot + $knum
      @ datatot = $datatot + $datanum
      echo $head.$count " number  of data = $datanum" " knumber ktot = $knum $ktot"
      if( $count == 1 ) then	
        cp  $head.1 $head.acc
      else
        tail -"$datanum" $head.$count >> $head.acc 
      endif
    endif
    @ count = $count + 1
  end
  if( -e $head.acc ) then
    echo " $head  ktot datatot =  $ktot $datatot "
    head -4  $head.acc     > $head
    echo "  $nspin   $ktot   $ntq  nspin  nq  ntq" >> $head
    awk '{if(NR>=6) print $0}' $head.acc           >> $head
    rm -f $head.acc
  endif
end

echo 0|$nfpgw/hqpe  >lqpe




 



